//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace IPlayer
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::IPlayer.IPlayer_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::IPlayer.IPlayer_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::IPlayer.IPlayer_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace IPlayer.IPlayer_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_LayoutAwarePage() { return new global::IPlayer.Common.LayoutAwarePage(); }

        private object Activate_1_Volumecontrols() { return new global::IPlayer.Converters.Volumecontrols(); }

        private object Activate_2_MediaPlayer() { return new global::Microsoft.PlayerFramework.MediaPlayer(); }

        private object Activate_7_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.PlayerFramework.IPlugin>(); }

        private object Activate_8_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Microsoft.PlayerFramework.IPlugin>(); }

        private object Activate_11_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.PlayerFramework.VisualMarker>(); }

        private object Activate_12_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Microsoft.PlayerFramework.VisualMarker>(); }

        private object Activate_13_VisualMarker() { return new global::Microsoft.PlayerFramework.VisualMarker(); }

        private object Activate_17_List() { return new global::System.Collections.Generic.List<global::Microsoft.PlayerFramework.Caption>(); }

        private object Activate_18_Caption() { return new global::Microsoft.PlayerFramework.Caption(); }

        private object Activate_20_List() { return new global::System.Collections.Generic.List<global::Microsoft.PlayerFramework.AudioStream>(); }

        private object Activate_21_AudioStream() { return new global::Microsoft.PlayerFramework.AudioStream(); }

        private object Activate_22_MediaExtensionManager() { return new global::Windows.Media.MediaExtensionManager(); }

        private object Activate_24_MediaProtectionManager() { return new global::Windows.Media.Protection.MediaProtectionManager(); }

        private object Activate_31_RingSlice() { return new global::WinRTXamlToolkit.Controls.RingSlice(); }

        private object Activate_33_CustomAppBar() { return new global::WinRTXamlToolkit.Controls.CustomAppBar(); }

        private object Activate_35_ClipToBoundsHandler() { return new global::WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler(); }

        private object Activate_38_CursorDisplayHandler() { return new global::WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler(); }

        private object Activate_39_RadAutoCompleteBox() { return new global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox(); }

        private object Activate_49_HighlightStyle() { return new global::Telerik.UI.Xaml.Controls.Input.HighlightStyle(); }

        private object Activate_50_MainPage() { return new global::IPlayer.Views.MainPage(); }

        private object Activate_51_AdControl() { return new global::Microsoft.Advertising.WinRT.UI.AdControl(); }

        private object Activate_52_SettingsFlyLayout() { return new global::IPlayer.Contracts.SettingsFlyLayout(); }

        private object Activate_53_ControlPanel() { return new global::Microsoft.PlayerFramework.ControlPanel(); }

        private object Activate_54_BoolToVisibilityConverter() { return new global::Microsoft.PlayerFramework.BoolToVisibilityConverter(); }

        private object Activate_55_TimeElapsedButton() { return new global::Microsoft.PlayerFramework.TimeElapsedButton(); }

        private object Activate_56_SkipBackButton() { return new global::Microsoft.PlayerFramework.SkipBackButton(); }

        private object Activate_57_MediaPlayerButton() { return new global::Microsoft.PlayerFramework.MediaPlayerButton(); }

        private object Activate_59_Timeline() { return new global::Microsoft.PlayerFramework.Timeline(); }

        private object Activate_60_TimeRemainingButton() { return new global::Microsoft.PlayerFramework.TimeRemainingButton(); }

        private object Activate_61_SkipAheadButton() { return new global::Microsoft.PlayerFramework.SkipAheadButton(); }

        private object Activate_62_DurationButton() { return new global::Microsoft.PlayerFramework.DurationButton(); }

        private object Activate_63_SeekableSlider() { return new global::Microsoft.PlayerFramework.SeekableSlider(); }

        private object Activate_64_PlayPauseButton() { return new global::Microsoft.PlayerFramework.PlayPauseButton(); }

        private object Activate_65_FastForwardButton() { return new global::Microsoft.PlayerFramework.FastForwardButton(); }

        private object Activate_66_SkipNextButton() { return new global::Microsoft.PlayerFramework.SkipNextButton(); }

        private object Activate_67_SkipPreviousButton() { return new global::Microsoft.PlayerFramework.SkipPreviousButton(); }

        private object Activate_68_RewindButton() { return new global::Microsoft.PlayerFramework.RewindButton(); }

        private object Activate_69_InteractiveViewModel() { return new global::Microsoft.PlayerFramework.InteractiveViewModel(); }

        private object Activate_74_MediaPlayerControl() { return new global::Microsoft.PlayerFramework.MediaPlayerControl(); }

        private object Activate_75_MediaPlayerToggleButton() { return new global::Microsoft.PlayerFramework.MediaPlayerToggleButton(); }

        private object Activate_76_FullScreenButton() { return new global::Microsoft.PlayerFramework.FullScreenButton(); }

        private object Activate_77_MuteButton() { return new global::Microsoft.PlayerFramework.MuteButton(); }

        private object Activate_78_SlowMotionButton() { return new global::Microsoft.PlayerFramework.SlowMotionButton(); }

        private object Activate_79_PlayButton() { return new global::Microsoft.PlayerFramework.PlayButton(); }

        private object Activate_80_PauseButton() { return new global::Microsoft.PlayerFramework.PauseButton(); }

        private object Activate_81_CaptionSelectionButton() { return new global::Microsoft.PlayerFramework.CaptionSelectionButton(); }

        private object Activate_82_GoLiveButton() { return new global::Microsoft.PlayerFramework.GoLiveButton(); }

        private object Activate_83_AudioSelectionButton() { return new global::Microsoft.PlayerFramework.AudioSelectionButton(); }

        private object Activate_84_StopButton() { return new global::Microsoft.PlayerFramework.StopButton(); }

        private object Activate_85_ReplayButton() { return new global::Microsoft.PlayerFramework.ReplayButton(); }

        private object Activate_86_TimeElapsed() { return new global::Microsoft.PlayerFramework.TimeElapsed(); }

        private object Activate_87_TimeRemaining() { return new global::Microsoft.PlayerFramework.TimeRemaining(); }

        private object Activate_88_TotalDuration() { return new global::Microsoft.PlayerFramework.TotalDuration(); }

        private object Activate_89_VolumeSlider() { return new global::Microsoft.PlayerFramework.VolumeSlider(); }

        private object Activate_90_VolumeButton() { return new global::Microsoft.PlayerFramework.VolumeButton(); }

        private object Activate_91_SignalStrength() { return new global::Microsoft.PlayerFramework.SignalStrength(); }

        private object Activate_92_ResolutionIndicator() { return new global::Microsoft.PlayerFramework.ResolutionIndicator(); }

        private object Activate_93_DeselectableListBox() { return new global::Microsoft.PlayerFramework.DeselectableListBox(); }

        private object Activate_94_LoaderView() { return new global::Microsoft.PlayerFramework.LoaderView(); }

        private object Activate_95_ErrorView() { return new global::Microsoft.PlayerFramework.ErrorView(); }

        private object Activate_96_BufferingView() { return new global::Microsoft.PlayerFramework.BufferingView(); }

        private object Activate_97_CaptionSelectorView() { return new global::Microsoft.PlayerFramework.CaptionSelectorView(); }

        private object Activate_98_AudioSelectionView() { return new global::Microsoft.PlayerFramework.AudioSelectionView(); }

        private object Activate_99_PositionedItemsControl() { return new global::Microsoft.PlayerFramework.PositionedItemsControl(); }

        private object Activate_100_PositionedItemsPanel() { return new global::Microsoft.PlayerFramework.PositionedItemsPanel(); }

        private object Activate_102_TargetNullValueConverter() { return new global::Microsoft.PlayerFramework.TargetNullValueConverter(); }

        private object Activate_103_ParentAwareListBox() { return new global::Microsoft.PlayerFramework.ParentAwareListBox(); }

        private object Activate_105_ChartAnnotationLabelDefinition() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition(); }

        private void VectorAdd_7_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.PlayerFramework.IPlugin>)instance;
            var newItem = (global::Microsoft.PlayerFramework.IPlugin)item;
            collection.Add(newItem);
        }

        private void VectorAdd_8_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.PlayerFramework.IPlugin>)instance;
            var newItem = (global::Microsoft.PlayerFramework.IPlugin)item;
            collection.Add(newItem);
        }

        private void VectorAdd_11_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.PlayerFramework.VisualMarker>)instance;
            var newItem = (global::Microsoft.PlayerFramework.VisualMarker)item;
            collection.Add(newItem);
        }

        private void VectorAdd_12_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.PlayerFramework.VisualMarker>)instance;
            var newItem = (global::Microsoft.PlayerFramework.VisualMarker)item;
            collection.Add(newItem);
        }

        private void VectorAdd_17_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.PlayerFramework.Caption>)instance;
            var newItem = (global::Microsoft.PlayerFramework.Caption)item;
            collection.Add(newItem);
        }

        private void VectorAdd_20_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.PlayerFramework.AudioStream>)instance;
            var newItem = (global::Microsoft.PlayerFramework.AudioStream)item;
            collection.Add(newItem);
        }

        private void VectorAdd_26_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Double>)instance;
            var newItem = (global::System.Double)item;
            collection.Add(newItem);
        }

        private void VectorAdd_27_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.UIElement>)instance;
            var newItem = (global::Windows.UI.Xaml.UIElement)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Object":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Windows.UI.Xaml.Media.AudioCategory":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.AudioCategory));
                break;

            case "Boolean":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Windows.UI.Xaml.Data.IValueConverter":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Data.IValueConverter));
                break;

            case "Windows.UI.Xaml.DependencyObject":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DependencyObject));
                break;

            case "String":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Windows.UI.Xaml.Style":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Style));
                break;

            case "Windows.UI.Xaml.Media.TimelineMarkerCollection":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.TimelineMarkerCollection));
                break;

            case "Double":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "Windows.UI.Xaml.FrameworkElement":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.FrameworkElement));
                break;

            case "Int32":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.Media.AudioDeviceType":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.AudioDeviceType));
                break;

            case "Windows.UI.Xaml.Media.ImageSource":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.ImageSource));
                break;

            case "Windows.UI.Xaml.Media.Stereo3DVideoPackingMode":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Stereo3DVideoPackingMode));
                break;

            case "Windows.UI.Xaml.Media.Stereo3DVideoRenderMode":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Stereo3DVideoRenderMode));
                break;

            case "Windows.UI.Xaml.Duration":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Duration));
                break;

            case "Windows.UI.Xaml.Media.MediaElementState":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.MediaElementState));
                break;

            case "Windows.UI.Xaml.UIElement":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.UIElement));
                break;

            case "Windows.UI.Xaml.Shapes.Path":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Shapes.Path));
                break;

            case "Windows.UI.Xaml.Controls.ContentControl":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ContentControl));
                break;

            case "Windows.UI.Xaml.DataTemplate":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DataTemplate));
                break;

            case "Windows.UI.Xaml.Visibility":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Visibility));
                break;

            case "Windows.UI.Xaml.Controls.Panel":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Panel));
                break;

            case "Windows.UI.Xaml.Controls.Button":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Button));
                break;

            case "Windows.UI.Xaml.Media.Transform":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Transform));
                break;

            case "Windows.UI.Xaml.Controls.Slider":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Slider));
                break;

            case "Windows.UI.Xaml.Media.Brush":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Brush));
                break;

            case "Windows.UI.Xaml.Controls.Primitives.ToggleButton":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton));
                break;

            case "Windows.UI.Xaml.Controls.Orientation":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Orientation));
                break;

            case "Windows.UI.Xaml.FocusState":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.FocusState));
                break;

            case "Windows.UI.Xaml.Thickness":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Thickness));
                break;

            case "Windows.UI.Xaml.Controls.Primitives.RangeBase":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Primitives.RangeBase));
                break;

            case "Windows.UI.Xaml.Controls.ListBox":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ListBox));
                break;

            case "Windows.UI.Xaml.Controls.ItemsControl":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ItemsControl));
                break;

            case "Windows.UI.Xaml.Controls.ListBoxItem":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ListBoxItem));
                break;

            case "Windows.UI.Xaml.HorizontalAlignment":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.HorizontalAlignment));
                break;

            case "Windows.UI.Xaml.VerticalAlignment":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.VerticalAlignment));
                break;

            case "Windows.UI.Xaml.Media.FontFamily":
                xamlType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.FontFamily));
                break;

            case "IPlayer.Common.LayoutAwarePage":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::IPlayer.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_LayoutAwarePage;
                xamlType = userType;
                break;

            case "IPlayer.Converters.Volumecontrols":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::IPlayer.Converters.Volumecontrols), GetXamlTypeByName("Object"));
                userType.Activator = Activate_1_Volumecontrols;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.MediaPlayer":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.MediaPlayer), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_2_MediaPlayer;
                userType.AddMemberName("AudioCategory");
                userType.AddMemberName("AutoHide");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("AutoHideBehavior");
                userType.AddMemberName("IsFastForwardVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsRewindVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipAheadVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipBackVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("MediaQuality");
                userType.AddMemberName("AutoLoadPlugins");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Plugins");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.PlayerFramework.IPlugin>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Microsoft.PlayerFramework.IPlugin>");
                userType.AddMemberName("IsCaptionSelectionEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsCaptionSelectionAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsGoLiveEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsGoLiveAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsPlayResumeEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsPlayResumeAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsPauseEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsPauseAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsStopEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsStopAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsReplayEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsReplayAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsAudioSelectionEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsAudioSelectionAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsRewindEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsRewindAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsFastForwardEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsFastForwardAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSlowMotionEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSlowMotionAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSeekEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSeekAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipPreviousEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipPreviousAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipNextEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipNextAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipBackEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipBackAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipAheadEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipAheadAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsScrubbingEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsScrubbingAllowed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsAudioSelectionVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsCaptionSelectionVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsDurationVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsTimeRemainingVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsFullScreenVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsGoLiveVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsPlayPauseVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsTimeElapsedVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsReplayVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipPreviousVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipNextVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSlowMotionVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsStopVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsTimelineVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsVolumeVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSignalStrengthVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsResolutionIndicatorVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("TimeFormatConverter");
                userType.AddMemberName("SkipBackInterval");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.TimeSpan>),
                                                   "System.Nullable<TimeSpan>");
                userType.AddMemberName("SkipAheadInterval");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.TimeSpan>),
                                                   "System.Nullable<TimeSpan>");
                userType.AddMemberName("VisualMarkers");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.PlayerFramework.VisualMarker>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Microsoft.PlayerFramework.VisualMarker>");
                userType.AddMemberName("Markers");
                userType.AddMemberName("AutoLoad");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("SignalStrength");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("LivePositionBuffer");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("IsPositionLive");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("LivePosition");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.TimeSpan>),
                                                   "System.Nullable<TimeSpan>");
                userType.AddMemberName("Duration");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("IsStartTimeOffset");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("StartTime");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("EndTime");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("TimeRemaining");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("SeekWhileScrubbing");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ReplayOffset");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("SlowMotionPlaybackRate");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("IsSlowMotion");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsCaptionsActive");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsFullScreen");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("AdvertisingState");
                userType.AddMemberName("IsScrubbing");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("StartupPosition");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.TimeSpan>),
                                                   "System.Nullable<TimeSpan>");
                userType.AddMemberName("MediaEndedBehavior");
                userType.AddMemberName("UpdateInterval");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("AvailableCaptions");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::Microsoft.PlayerFramework.Caption>),
                                                   "System.Collections.Generic.List<Microsoft.PlayerFramework.Caption>");
                userType.AddMemberName("SelectedCaption");
                userType.AddMemberName("AvailableAudioStreams");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::Microsoft.PlayerFramework.AudioStream>),
                                                   "System.Collections.Generic.List<Microsoft.PlayerFramework.AudioStream>");
                userType.AddMemberName("SelectedAudioStream");
                userType.AddMemberName("IsLive");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("TestForMediaPack");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("MediaExtensionManager");
                userType.AddMemberName("AspectRatioWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("AspectRatioHeight");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("AudioDeviceType");
                userType.AddMemberName("PlayToSource");
                userType.AddMemberName("DefaultPlaybackRate");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("IsAudioOnly");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsLooping");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("PosterSource");
                userType.AddMemberName("ActualStereo3DVideoPackingMode");
                userType.AddMemberName("Stereo3DVideoPackingMode");
                userType.AddMemberName("Stereo3DVideoRenderMode");
                userType.AddMemberName("IsStereo3DVideo");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("RealTimePlayback");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ProtectionManager");
                userType.AddMemberName("AudioStreamCount");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("AudioStreamIndex");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.Int32>),
                                                   "System.Nullable<Int32>");
                userType.AddMemberName("AutoPlay");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("BufferingProgress");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("CanPause");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("CanSeek");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Balance");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("DownloadProgress");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("DownloadProgressOffset");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("IsMuted");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("NaturalDuration");
                userType.AddMemberName("NaturalVideoHeight");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("NaturalVideoWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("PlaybackRate");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Position");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("CurrentState");
                userType.AddMemberName("Source");
                userType.AddMemberName("Volume");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("SupportedPlaybackRates");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IList<global::System.Double>),
                                                   "System.Collections.Generic.IList<Double>");
                userType.AddMemberName("AllowMediaStartingDeferrals");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ControlPanel");
                userType.AddMemberName("AutoHideInterval");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("Containers");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>),
                                                   "System.Collections.Generic.IList<Windows.UI.Xaml.UIElement>");
                userType.AddMemberName("InteractiveViewModel");
                userType.AddMemberName("DefaultInteractiveViewModel");
                userType.AddMemberName("InteractiveActivationMode");
                userType.AddMemberName("InteractiveDeactivationMode");
                userType.AddMemberName("IsInteractive");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("PlayerState");
                userType.AddMemberName("ResourceString");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.AutoHideBehavior":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.AutoHideBehavior), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Microsoft.PlayerFramework.AutoHideBehavior.None);
                userType.AddEnumValue("AllowDuringPlaybackOnly", global::Microsoft.PlayerFramework.AutoHideBehavior.AllowDuringPlaybackOnly);
                userType.AddEnumValue("PreventDuringInteractiveHover", global::Microsoft.PlayerFramework.AutoHideBehavior.PreventDuringInteractiveHover);
                userType.AddEnumValue("All", global::Microsoft.PlayerFramework.AutoHideBehavior.All);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.MediaQuality":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.MediaQuality), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("StandardDefinition", global::Microsoft.PlayerFramework.MediaQuality.StandardDefinition);
                userType.AddEnumValue("HighDefinition", global::Microsoft.PlayerFramework.MediaQuality.HighDefinition);
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Microsoft.PlayerFramework.IPlugin>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.PlayerFramework.IPlugin>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Microsoft.PlayerFramework.IPlugin>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.PlayerFramework.IPlugin>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Microsoft.PlayerFramework.IPlugin>");
                userType.Activator = Activate_7_ObservableCollection;
                userType.CollectionAdd = VectorAdd_7_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Microsoft.PlayerFramework.IPlugin>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Microsoft.PlayerFramework.IPlugin>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Microsoft.PlayerFramework.IPlugin>),
                                                   "System.Collections.ObjectModel.Collection<Microsoft.PlayerFramework.IPlugin>");
                userType.Activator = Activate_8_Collection;
                userType.CollectionAdd = VectorAdd_8_Collection;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.IPlugin":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.IPlugin), null);
                userType.AddMemberName("MediaPlayer");
                xamlType = userType;
                break;

            case "System.Nullable<TimeSpan>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Nullable<global::System.TimeSpan>), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.TimeSpan>),
                                                   "System.Nullable<TimeSpan>");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<Microsoft.PlayerFramework.VisualMarker>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.PlayerFramework.VisualMarker>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<Microsoft.PlayerFramework.VisualMarker>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.PlayerFramework.VisualMarker>),
                                                   "System.Collections.ObjectModel.ObservableCollection<Microsoft.PlayerFramework.VisualMarker>");
                userType.Activator = Activate_11_ObservableCollection;
                userType.CollectionAdd = VectorAdd_11_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<Microsoft.PlayerFramework.VisualMarker>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::Microsoft.PlayerFramework.VisualMarker>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::Microsoft.PlayerFramework.VisualMarker>),
                                                   "System.Collections.ObjectModel.Collection<Microsoft.PlayerFramework.VisualMarker>");
                userType.Activator = Activate_12_Collection;
                userType.CollectionAdd = VectorAdd_12_Collection;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.VisualMarker":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.VisualMarker), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_13_VisualMarker;
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Time");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("IsSeekable");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Style");
                xamlType = userType;
                break;

            case "TimeSpan":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.TimeSpan), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.AdvertisingState":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.AdvertisingState), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Microsoft.PlayerFramework.AdvertisingState.None);
                userType.AddEnumValue("Loading", global::Microsoft.PlayerFramework.AdvertisingState.Loading);
                userType.AddEnumValue("Linear", global::Microsoft.PlayerFramework.AdvertisingState.Linear);
                userType.AddEnumValue("NonLinear", global::Microsoft.PlayerFramework.AdvertisingState.NonLinear);
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.MediaEndedBehavior":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.MediaEndedBehavior), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Manual", global::Microsoft.PlayerFramework.MediaEndedBehavior.Manual);
                userType.AddEnumValue("Stop", global::Microsoft.PlayerFramework.MediaEndedBehavior.Stop);
                userType.AddEnumValue("Reset", global::Microsoft.PlayerFramework.MediaEndedBehavior.Reset);
                xamlType = userType;
                break;

            case "System.Collections.Generic.List<Microsoft.PlayerFramework.Caption>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.List<global::Microsoft.PlayerFramework.Caption>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::Microsoft.PlayerFramework.Caption>),
                                                   "System.Collections.Generic.List<Microsoft.PlayerFramework.Caption>");
                userType.Activator = Activate_17_List;
                userType.CollectionAdd = VectorAdd_17_List;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.Caption":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.Caption), GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_18_Caption;
                userType.AddMemberName("Id");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Description");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Payload");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("Source");
                xamlType = userType;
                break;

            case "System.Uri":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Uri), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "System.Collections.Generic.List<Microsoft.PlayerFramework.AudioStream>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.List<global::Microsoft.PlayerFramework.AudioStream>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::Microsoft.PlayerFramework.AudioStream>),
                                                   "System.Collections.Generic.List<Microsoft.PlayerFramework.AudioStream>");
                userType.Activator = Activate_20_List;
                userType.CollectionAdd = VectorAdd_20_List;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.AudioStream":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.AudioStream), GetXamlTypeByName("Object"));
                userType.Activator = Activate_21_AudioStream;
                userType.AddMemberName("Name");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Language");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "Windows.Media.MediaExtensionManager":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Media.MediaExtensionManager), GetXamlTypeByName("Object"));
                userType.Activator = Activate_22_MediaExtensionManager;
                xamlType = userType;
                break;

            case "Windows.Media.PlayTo.PlayToSource":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Media.PlayTo.PlayToSource), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Windows.Media.Protection.MediaProtectionManager":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Media.Protection.MediaProtectionManager), GetXamlTypeByName("Object"));
                userType.Activator = Activate_24_MediaProtectionManager;
                xamlType = userType;
                break;

            case "System.Nullable<Int32>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Nullable<global::System.Int32>), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.Int32>),
                                                   "System.Nullable<Int32>");
                xamlType = userType;
                break;

            case "System.Collections.Generic.IList<Double>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.IList<global::System.Double>), null);
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IList<global::System.Double>),
                                                   "System.Collections.Generic.IList<Double>");
                userType.CollectionAdd = VectorAdd_26_IList;
                xamlType = userType;
                break;

            case "System.Collections.Generic.IList<Windows.UI.Xaml.UIElement>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>), null);
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>),
                                                   "System.Collections.Generic.IList<Windows.UI.Xaml.UIElement>");
                userType.CollectionAdd = VectorAdd_27_IList;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.IInteractiveViewModel":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.IInteractiveViewModel), null);
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.InteractionType":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.InteractionType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Microsoft.PlayerFramework.InteractionType.None);
                userType.AddEnumValue("Soft", global::Microsoft.PlayerFramework.InteractionType.Soft);
                userType.AddEnumValue("Hard", global::Microsoft.PlayerFramework.InteractionType.Hard);
                userType.AddEnumValue("All", global::Microsoft.PlayerFramework.InteractionType.All);
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.PlayerState":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.PlayerState), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Unloaded", global::Microsoft.PlayerFramework.PlayerState.Unloaded);
                userType.AddEnumValue("Pending", global::Microsoft.PlayerFramework.PlayerState.Pending);
                userType.AddEnumValue("Loading", global::Microsoft.PlayerFramework.PlayerState.Loading);
                userType.AddEnumValue("Loaded", global::Microsoft.PlayerFramework.PlayerState.Loaded);
                userType.AddEnumValue("Opened", global::Microsoft.PlayerFramework.PlayerState.Opened);
                userType.AddEnumValue("Starting", global::Microsoft.PlayerFramework.PlayerState.Starting);
                userType.AddEnumValue("Started", global::Microsoft.PlayerFramework.PlayerState.Started);
                userType.AddEnumValue("Ending", global::Microsoft.PlayerFramework.PlayerState.Ending);
                userType.AddEnumValue("Failed", global::Microsoft.PlayerFramework.PlayerState.Failed);
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.RingSlice":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.RingSlice), GetXamlTypeByName("Windows.UI.Xaml.Shapes.Path"));
                userType.Activator = Activate_31_RingSlice;
                userType.AddMemberName("EndAngle");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("InnerRadius");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Radius");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("StartAngle");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Center");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::Windows.Foundation.Point>),
                                                   "System.Nullable<Windows.Foundation.Point>");
                xamlType = userType;
                break;

            case "System.Nullable<Windows.Foundation.Point>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Nullable<global::Windows.Foundation.Point>), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::Windows.Foundation.Point>),
                                                   "System.Nullable<Windows.Foundation.Point>");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.CustomAppBar":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.CustomAppBar), GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_33_CustomAppBar;
                userType.AddMemberName("IsOpen");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("CanOpen");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("CanDismiss");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("CanOpenInSnappedView");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsLightDismissEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions), GetXamlTypeByName("Object"));
                userType.AddMemberName("ClipToBounds");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ClipToBoundsHandler");
                userType.AddMemberName("Cursor");
                userType.AddMemberName("SystemCursor");
                userType.AddMemberName("CursorDisplayHandler");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler), GetXamlTypeByName("Object"));
                userType.Activator = Activate_35_ClipToBoundsHandler;
                xamlType = userType;
                break;

            case "Windows.UI.Core.CoreCursor":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.UI.Core.CoreCursor), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Windows.UI.Core.CoreCursorType":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.UI.Core.CoreCursorType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Arrow", global::Windows.UI.Core.CoreCursorType.Arrow);
                userType.AddEnumValue("Cross", global::Windows.UI.Core.CoreCursorType.Cross);
                userType.AddEnumValue("Custom", global::Windows.UI.Core.CoreCursorType.Custom);
                userType.AddEnumValue("Hand", global::Windows.UI.Core.CoreCursorType.Hand);
                userType.AddEnumValue("Help", global::Windows.UI.Core.CoreCursorType.Help);
                userType.AddEnumValue("IBeam", global::Windows.UI.Core.CoreCursorType.IBeam);
                userType.AddEnumValue("SizeAll", global::Windows.UI.Core.CoreCursorType.SizeAll);
                userType.AddEnumValue("SizeNortheastSouthwest", global::Windows.UI.Core.CoreCursorType.SizeNortheastSouthwest);
                userType.AddEnumValue("SizeNorthSouth", global::Windows.UI.Core.CoreCursorType.SizeNorthSouth);
                userType.AddEnumValue("SizeNorthwestSoutheast", global::Windows.UI.Core.CoreCursorType.SizeNorthwestSoutheast);
                userType.AddEnumValue("SizeWestEast", global::Windows.UI.Core.CoreCursorType.SizeWestEast);
                userType.AddEnumValue("UniversalNo", global::Windows.UI.Core.CoreCursorType.UniversalNo);
                userType.AddEnumValue("UpArrow", global::Windows.UI.Core.CoreCursorType.UpArrow);
                userType.AddEnumValue("Wait", global::Windows.UI.Core.CoreCursorType.Wait);
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler), GetXamlTypeByName("Object"));
                userType.Activator = Activate_38_CursorDisplayHandler;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox), GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl"));
                userType.Activator = Activate_39_RadAutoCompleteBox;
                userType.AddMemberName("DropDownPlacement");
                userType.AddMemberName("FilterMode");
                userType.AddMemberName("IsDropDownOpen");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("FilterComparisonMode");
                userType.AddMemberName("FilterMemberPath");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("DisplayMemberPath");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("FilterStartThreshold");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("FilterDelay");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("FilterMemberProvider");
                AddToMapOfTypeToStandardName(typeof(global::System.Func<global::System.Object, global::System.String>),
                                                   "System.Func<Object, String>");
                userType.AddMemberName("FilteredItems");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("AutosuggestFirstItem");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("DropDownMaxHeight");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("WatermarkContent");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("WatermarkTemplate");
                userType.AddMemberName("SelectedItem");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("IsTextMatchHighlightEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("TextMatchHighlightStyle");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.RadHeaderedControl":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.RadHeaderedControl), GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("HeaderStyle");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.RadControl":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.RadControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("CurrentVisualState");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxPlacementMode":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxPlacementMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxPlacementMode.Auto);
                userType.AddEnumValue("Top", global::Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxPlacementMode.Top);
                userType.AddEnumValue("Bottom", global::Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxPlacementMode.Bottom);
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxPlacementMode.None);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxFilterMode":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxFilterMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("StartsWith", global::Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxFilterMode.StartsWith);
                userType.AddEnumValue("Contains", global::Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxFilterMode.Contains);
                xamlType = userType;
                break;

            case "System.StringComparison":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.StringComparison), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("CurrentCulture", global::System.StringComparison.CurrentCulture);
                userType.AddEnumValue("CurrentCultureIgnoreCase", global::System.StringComparison.CurrentCultureIgnoreCase);
                userType.AddEnumValue("Ordinal", global::System.StringComparison.Ordinal);
                userType.AddEnumValue("OrdinalIgnoreCase", global::System.StringComparison.OrdinalIgnoreCase);
                xamlType = userType;
                break;

            case "System.Func<Object, String>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Func<global::System.Object, global::System.String>), GetXamlTypeByName("System.MulticastDelegate"));
                AddToMapOfTypeToStandardName(typeof(global::System.Func<global::System.Object, global::System.String>),
                                                   "System.Func<Object, String>");
                xamlType = userType;
                break;

            case "System.MulticastDelegate":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.MulticastDelegate), GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case "System.Delegate":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Delegate), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "System.Collections.IEnumerable":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.IEnumerable), null);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.HighlightStyle), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_49_HighlightStyle;
                userType.AddMemberName("FontFamily");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("FontSize");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case "IPlayer.Views.MainPage":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::IPlayer.Views.MainPage), GetXamlTypeByName("IPlayer.Common.LayoutAwarePage"));
                userType.Activator = Activate_50_MainPage;
                xamlType = userType;
                break;

            case "Microsoft.Advertising.WinRT.UI.AdControl":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.Advertising.WinRT.UI.AdControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_51_AdControl;
                userType.AddMemberName("AdUnitId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ApplicationId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Latitude");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Longitude");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("IsEngaged");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsAutoRefreshEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsPerformanceScrollingEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("UseStaticAnchor");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSuspended");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "IPlayer.Contracts.SettingsFlyLayout":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::IPlayer.Contracts.SettingsFlyLayout), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_52_SettingsFlyLayout;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.ControlPanel":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.ControlPanel), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_53_ControlPanel;
                userType.AddMemberName("ViewModel");
                userType.AddMemberName("GoLiveButtonVisibility");
                userType.AddMemberName("IsGoLiveButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsAudioSelectionButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsCaptionSelectionButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsTimeElapsedButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsDurationButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsTimeRemainingButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipNextButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipPreviousButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipAheadButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipBackButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsFastForwardButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsStopButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsRewindButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsReplayButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsResolutionIndicatorVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSignalStrengthVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsFullScreenButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsMuteButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSlowMotionButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsPlayPauseButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsVolumeButtonVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsVolumeSliderVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsTimelineVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("LeftItemsPanel");
                userType.AddMemberName("RightItemsPanel");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.BoolToVisibilityConverter":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.BoolToVisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_54_BoolToVisibilityConverter;
                userType.AddMemberName("Inverse");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.TimeElapsedButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.TimeElapsedButton), GetXamlTypeByName("Microsoft.PlayerFramework.SkipBackButton"));
                userType.Activator = Activate_55_TimeElapsedButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.SkipBackButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.SkipBackButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_56_SkipBackButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.MediaPlayerButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.MediaPlayerButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_57_MediaPlayerButton;
                userType.AddMemberName("ViewModel");
                userType.AddMemberName("Command");
                userType.AddMemberName("Size");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("StrokeThickness");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ContentTransform");
                userType.AddMemberName("ContentHover");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("ContentUnhover");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("IsSelected");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("SelectedContent");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("SelectedContentTemplate");
                userType.AddMemberName("UnselectedContent");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("UnselectedContentTemplate");
                userType.AddMemberName("SelectedName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("UnselectedName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.ViewModelCommand":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.ViewModelCommand), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.Timeline":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.Timeline), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_59_Timeline;
                userType.AddMemberName("ViewModel");
                userType.AddMemberName("SliderStyle");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.TimeRemainingButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.TimeRemainingButton), GetXamlTypeByName("Microsoft.PlayerFramework.SkipAheadButton"));
                userType.Activator = Activate_60_TimeRemainingButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.SkipAheadButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.SkipAheadButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_61_SkipAheadButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.DurationButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.DurationButton), GetXamlTypeByName("Microsoft.PlayerFramework.SkipAheadButton"));
                userType.Activator = Activate_62_DurationButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.SeekableSlider":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.SeekableSlider), GetXamlTypeByName("Windows.UI.Xaml.Controls.Slider"));
                userType.Activator = Activate_63_SeekableSlider;
                userType.AddMemberName("SliderTrackDecreasePressedBackground");
                userType.AddMemberName("SliderTrackDecreasePointerOverBackground");
                userType.AddMemberName("SliderThumbStyle");
                userType.AddMemberName("IsScrubbing");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ActualValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("MaxValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("HorizontalBackgroundContent");
                userType.AddMemberName("HorizontalForegroundContent");
                userType.AddMemberName("VerticalBackgroundContent");
                userType.AddMemberName("VerticalForegroundContent");
                userType.AddMemberName("SliderTrackPressedBackground");
                userType.AddMemberName("SliderThumbPressedBackground");
                userType.AddMemberName("SliderThumbPressedBorder");
                userType.AddMemberName("SliderDisabledBorder");
                userType.AddMemberName("SliderTrackDecreaseDisabledBackground");
                userType.AddMemberName("SliderTrackDisabledBackground");
                userType.AddMemberName("SliderThumbDisabledBackground");
                userType.AddMemberName("SliderTrackPointerOverBackground");
                userType.AddMemberName("SliderThumbPointerOverBackground");
                userType.AddMemberName("SliderThumbPointerOverBorder");
                userType.AddMemberName("SliderThumbBackground");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.PlayPauseButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.PlayPauseButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_64_PlayPauseButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.FastForwardButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.FastForwardButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_65_FastForwardButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.SkipNextButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.SkipNextButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_66_SkipNextButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.SkipPreviousButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.SkipPreviousButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_67_SkipPreviousButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.RewindButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.RewindButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_68_RewindButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.InteractiveViewModel":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.InteractiveViewModel), GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModelBase"));
                userType.Activator = Activate_69_InteractiveViewModel;
                userType.AddMemberName("MediaPlayer");
                userType.AddMemberName("AvailableCaptions");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::Microsoft.PlayerFramework.Caption>),
                                                   "System.Collections.Generic.IEnumerable<Microsoft.PlayerFramework.Caption>");
                userType.AddMemberName("SelectedCaption");
                userType.AddMemberName("AvailableAudioStreams");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::Microsoft.PlayerFramework.AudioStream>),
                                                   "System.Collections.Generic.IEnumerable<Microsoft.PlayerFramework.AudioStream>");
                userType.AddMemberName("SelectedAudioStream");
                userType.AddMemberName("VisualMarkers");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::Microsoft.PlayerFramework.VisualMarker>),
                                                   "System.Collections.Generic.IEnumerable<Microsoft.PlayerFramework.VisualMarker>");
                userType.AddMemberName("IsGoLiveEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsPlayResumeEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsPauseEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsStopEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsReplayEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsAudioSelectionEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsCaptionSelectionEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsRewindEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsFastForwardEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSlowMotionEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSeekEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipPreviousEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipNextEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipBackEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSkipAheadEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsScrubbingEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("BufferingProgress");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("DownloadProgress");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("StartTime");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("EndTime");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("Duration");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("TimeRemaining");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("Position");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("MaxPosition");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("CurrentState");
                userType.AddMemberName("TimeFormatConverter");
                userType.AddMemberName("SkipBackInterval");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.TimeSpan>),
                                                   "System.Nullable<TimeSpan>");
                userType.AddMemberName("SkipAheadInterval");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.TimeSpan>),
                                                   "System.Nullable<TimeSpan>");
                userType.AddMemberName("SignalStrength");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("MediaQuality");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.InteractiveViewModelBase":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.InteractiveViewModelBase), GetXamlTypeByName("Object"));
                userType.AddMemberName("SkipPreviousThreshold");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("IsMuted");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsFullScreen");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSlowMotion");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Volume");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "System.Collections.Generic.IEnumerable<Microsoft.PlayerFramework.Caption>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.IEnumerable<global::Microsoft.PlayerFramework.Caption>), null);
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::Microsoft.PlayerFramework.Caption>),
                                                   "System.Collections.Generic.IEnumerable<Microsoft.PlayerFramework.Caption>");
                xamlType = userType;
                break;

            case "System.Collections.Generic.IEnumerable<Microsoft.PlayerFramework.AudioStream>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.IEnumerable<global::Microsoft.PlayerFramework.AudioStream>), null);
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::Microsoft.PlayerFramework.AudioStream>),
                                                   "System.Collections.Generic.IEnumerable<Microsoft.PlayerFramework.AudioStream>");
                xamlType = userType;
                break;

            case "System.Collections.Generic.IEnumerable<Microsoft.PlayerFramework.VisualMarker>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.IEnumerable<global::Microsoft.PlayerFramework.VisualMarker>), null);
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::Microsoft.PlayerFramework.VisualMarker>),
                                                   "System.Collections.Generic.IEnumerable<Microsoft.PlayerFramework.VisualMarker>");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.MediaPlayerControl":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.MediaPlayerControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_74_MediaPlayerControl;
                userType.AddMemberName("ViewModel");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.MediaPlayerToggleButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.MediaPlayerToggleButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.Primitives.ToggleButton"));
                userType.Activator = Activate_75_MediaPlayerToggleButton;
                userType.AddMemberName("Size");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Command");
                userType.AddMemberName("ViewModel");
                userType.AddMemberName("StrokeThickness");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ContentTransform");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.FullScreenButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.FullScreenButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_76_FullScreenButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.MuteButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.MuteButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_77_MuteButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.SlowMotionButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.SlowMotionButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerToggleButton"));
                userType.Activator = Activate_78_SlowMotionButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.PlayButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.PlayButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_79_PlayButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.PauseButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.PauseButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_80_PauseButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.CaptionSelectionButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.CaptionSelectionButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_81_CaptionSelectionButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.GoLiveButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.GoLiveButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_82_GoLiveButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.AudioSelectionButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.AudioSelectionButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_83_AudioSelectionButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.StopButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.StopButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_84_StopButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.ReplayButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.ReplayButton), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton"));
                userType.Activator = Activate_85_ReplayButton;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.TimeElapsed":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.TimeElapsed), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerControl"));
                userType.Activator = Activate_86_TimeElapsed;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.TimeRemaining":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.TimeRemaining), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerControl"));
                userType.Activator = Activate_87_TimeRemaining;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.TotalDuration":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.TotalDuration), GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerControl"));
                userType.Activator = Activate_88_TotalDuration;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.VolumeSlider":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.VolumeSlider), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_89_VolumeSlider;
                userType.AddMemberName("Orientation");
                userType.AddMemberName("ViewModel");
                userType.AddMemberName("InnerFocusState");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.VolumeButton":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.VolumeButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_90_VolumeButton;
                userType.AddMemberName("PanelBackground");
                userType.AddMemberName("ViewModel");
                userType.AddMemberName("PanelPosition");
                userType.AddMemberName("IsVolumeVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("MuteButtonStyle");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.SignalStrength":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.SignalStrength), GetXamlTypeByName("Windows.UI.Xaml.Controls.Primitives.RangeBase"));
                userType.Activator = Activate_91_SignalStrength;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.ResolutionIndicator":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.ResolutionIndicator), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_92_ResolutionIndicator;
                userType.AddMemberName("MediaQuality");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.DeselectableListBox":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.DeselectableListBox), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_93_DeselectableListBox;
                userType.AddMemberName("ItemsSource");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("SelectedItem");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("SelectedIdentifierText");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("DeselectedItem");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.LoaderView":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.LoaderView), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_94_LoaderView;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.ErrorView":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.ErrorView), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_95_ErrorView;
                userType.AddMemberName("ErrorText");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.BufferingView":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.BufferingView), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_96_BufferingView;
                userType.AddMemberName("ViewModel");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.CaptionSelectorView":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.CaptionSelectorView), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_97_CaptionSelectorView;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.AudioSelectionView":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.AudioSelectionView), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_98_AudioSelectionView;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.PositionedItemsControl":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.PositionedItemsControl), GetXamlTypeByName("Microsoft.PlayerFramework.PositionedItemsPanel"));
                userType.Activator = Activate_99_PositionedItemsControl;
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("ItemTemplate");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.PositionedItemsPanel":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.PositionedItemsPanel), GetXamlTypeByName("Windows.UI.Xaml.Controls.Panel"));
                userType.Activator = Activate_100_PositionedItemsPanel;
                userType.AddMemberName("Maximum");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Minimum");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("MaxPosition");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.Double>),
                                                   "System.Nullable<Double>");
                userType.AddMemberName("MinPosition");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.Double>),
                                                   "System.Nullable<Double>");
                userType.AddMemberName("DisplayAllItems");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Position");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "System.Nullable<Double>":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Nullable<global::System.Double>), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.Double>),
                                                   "System.Nullable<Double>");
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.TargetNullValueConverter":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.TargetNullValueConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_102_TargetNullValueConverter;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.ParentAwareListBox":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.ParentAwareListBox), GetXamlTypeByName("Windows.UI.Xaml.Controls.ListBox"));
                userType.Activator = Activate_103_ParentAwareListBox;
                xamlType = userType;
                break;

            case "Microsoft.PlayerFramework.ParentAwareListBoxItem":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Microsoft.PlayerFramework.ParentAwareListBoxItem), GetXamlTypeByName("Windows.UI.Xaml.Controls.ListBoxItem"));
                userType.AddMemberName("ParentListBox");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_105_ChartAnnotationLabelDefinition;
                userType.AddMemberName("Format");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Template");
                userType.AddMemberName("DefaultVisualStyle");
                userType.AddMemberName("Location");
                userType.AddMemberName("HorizontalAlignment");
                userType.AddMemberName("VerticalAlignment");
                userType.AddMemberName("HorizontalOffset");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("VerticalOffset");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Left", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Left);
                userType.AddEnumValue("Top", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Top);
                userType.AddEnumValue("Right", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Right);
                userType.AddEnumValue("Bottom", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Bottom);
                userType.AddEnumValue("Inside", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Inside);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.FontWeightName":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.FontWeightName), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Black", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Black);
                userType.AddEnumValue("Bold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Bold);
                userType.AddEnumValue("ExtraBlack", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraBlack);
                userType.AddEnumValue("ExtraBold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraBold);
                userType.AddEnumValue("ExtraLight", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraLight);
                userType.AddEnumValue("Light", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Light);
                userType.AddEnumValue("Medium", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Medium);
                userType.AddEnumValue("Normal", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Normal);
                userType.AddEnumValue("SemiBold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.SemiBold);
                userType.AddEnumValue("SemiLight", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.SemiLight);
                userType.AddEnumValue("Thin", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Thin);
                xamlType = userType;
                break;

            case "Windows.UI.Text.FontStyle":
                userType = new global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.UI.Text.FontStyle), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Windows.UI.Text.FontStyle.Oblique);
                userType.AddEnumValue("Italic", global::Windows.UI.Text.FontStyle.Italic);
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Callisto.Callisto_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Microsoft.Advertising.WinRT.UI.XamlAdControl_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Microsoft.PlayerFramework.Microsoft_PlayerFramework_Xaml_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::PerpetuumSoft.Controls.PerpetuumSoft_Controls_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Chart.Chart_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.DataVisualization.DataVisualization_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Grid.Grid_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Input.Input_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Primitives.Primitives_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_MediaPlayer_AudioCategory(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AudioCategory;
        }
        private void set_0_MediaPlayer_AudioCategory(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AudioCategory = (global::Windows.UI.Xaml.Media.AudioCategory)Value;
        }
        private object get_1_MediaPlayer_AutoHide(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AutoHide;
        }
        private void set_1_MediaPlayer_AutoHide(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AutoHide = (global::System.Boolean)Value;
        }
        private object get_2_MediaPlayer_AutoHideBehavior(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AutoHideBehavior;
        }
        private void set_2_MediaPlayer_AutoHideBehavior(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AutoHideBehavior = (global::Microsoft.PlayerFramework.AutoHideBehavior)Value;
        }
        private object get_3_MediaPlayer_IsFastForwardVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsFastForwardVisible;
        }
        private void set_3_MediaPlayer_IsFastForwardVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsFastForwardVisible = (global::System.Boolean)Value;
        }
        private object get_4_MediaPlayer_IsRewindVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsRewindVisible;
        }
        private void set_4_MediaPlayer_IsRewindVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsRewindVisible = (global::System.Boolean)Value;
        }
        private object get_5_MediaPlayer_IsSkipAheadVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipAheadVisible;
        }
        private void set_5_MediaPlayer_IsSkipAheadVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipAheadVisible = (global::System.Boolean)Value;
        }
        private object get_6_MediaPlayer_IsSkipBackVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipBackVisible;
        }
        private void set_6_MediaPlayer_IsSkipBackVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipBackVisible = (global::System.Boolean)Value;
        }
        private object get_7_MediaPlayer_MediaQuality(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.MediaQuality;
        }
        private void set_7_MediaPlayer_MediaQuality(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.MediaQuality = (global::Microsoft.PlayerFramework.MediaQuality)Value;
        }
        private object get_8_MediaPlayer_AutoLoadPlugins(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AutoLoadPlugins;
        }
        private void set_8_MediaPlayer_AutoLoadPlugins(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AutoLoadPlugins = (global::System.Boolean)Value;
        }
        private object get_9_MediaPlayer_Plugins(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Plugins;
        }
        private object get_10_IPlugin_MediaPlayer(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.IPlugin)instance;
            return that.MediaPlayer;
        }
        private void set_10_IPlugin_MediaPlayer(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.IPlugin)instance;
            that.MediaPlayer = (global::Microsoft.PlayerFramework.MediaPlayer)Value;
        }
        private object get_11_MediaPlayer_IsCaptionSelectionEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsCaptionSelectionEnabled;
        }
        private void set_11_MediaPlayer_IsCaptionSelectionEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsCaptionSelectionEnabled = (global::System.Boolean)Value;
        }
        private object get_12_MediaPlayer_IsCaptionSelectionAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsCaptionSelectionAllowed;
        }
        private object get_13_MediaPlayer_IsGoLiveEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsGoLiveEnabled;
        }
        private void set_13_MediaPlayer_IsGoLiveEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsGoLiveEnabled = (global::System.Boolean)Value;
        }
        private object get_14_MediaPlayer_IsGoLiveAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsGoLiveAllowed;
        }
        private object get_15_MediaPlayer_IsPlayResumeEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsPlayResumeEnabled;
        }
        private void set_15_MediaPlayer_IsPlayResumeEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsPlayResumeEnabled = (global::System.Boolean)Value;
        }
        private object get_16_MediaPlayer_IsPlayResumeAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsPlayResumeAllowed;
        }
        private object get_17_MediaPlayer_IsPauseEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsPauseEnabled;
        }
        private void set_17_MediaPlayer_IsPauseEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsPauseEnabled = (global::System.Boolean)Value;
        }
        private object get_18_MediaPlayer_IsPauseAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsPauseAllowed;
        }
        private object get_19_MediaPlayer_IsStopEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsStopEnabled;
        }
        private void set_19_MediaPlayer_IsStopEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsStopEnabled = (global::System.Boolean)Value;
        }
        private object get_20_MediaPlayer_IsStopAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsStopAllowed;
        }
        private object get_21_MediaPlayer_IsReplayEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsReplayEnabled;
        }
        private void set_21_MediaPlayer_IsReplayEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsReplayEnabled = (global::System.Boolean)Value;
        }
        private object get_22_MediaPlayer_IsReplayAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsReplayAllowed;
        }
        private object get_23_MediaPlayer_IsAudioSelectionEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsAudioSelectionEnabled;
        }
        private void set_23_MediaPlayer_IsAudioSelectionEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsAudioSelectionEnabled = (global::System.Boolean)Value;
        }
        private object get_24_MediaPlayer_IsAudioSelectionAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsAudioSelectionAllowed;
        }
        private object get_25_MediaPlayer_IsRewindEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsRewindEnabled;
        }
        private void set_25_MediaPlayer_IsRewindEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsRewindEnabled = (global::System.Boolean)Value;
        }
        private object get_26_MediaPlayer_IsRewindAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsRewindAllowed;
        }
        private object get_27_MediaPlayer_IsFastForwardEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsFastForwardEnabled;
        }
        private void set_27_MediaPlayer_IsFastForwardEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsFastForwardEnabled = (global::System.Boolean)Value;
        }
        private object get_28_MediaPlayer_IsFastForwardAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsFastForwardAllowed;
        }
        private object get_29_MediaPlayer_IsSlowMotionEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSlowMotionEnabled;
        }
        private void set_29_MediaPlayer_IsSlowMotionEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSlowMotionEnabled = (global::System.Boolean)Value;
        }
        private object get_30_MediaPlayer_IsSlowMotionAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSlowMotionAllowed;
        }
        private object get_31_MediaPlayer_IsSeekEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSeekEnabled;
        }
        private void set_31_MediaPlayer_IsSeekEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSeekEnabled = (global::System.Boolean)Value;
        }
        private object get_32_MediaPlayer_IsSeekAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSeekAllowed;
        }
        private object get_33_MediaPlayer_IsSkipPreviousEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipPreviousEnabled;
        }
        private void set_33_MediaPlayer_IsSkipPreviousEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipPreviousEnabled = (global::System.Boolean)Value;
        }
        private object get_34_MediaPlayer_IsSkipPreviousAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipPreviousAllowed;
        }
        private object get_35_MediaPlayer_IsSkipNextEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipNextEnabled;
        }
        private void set_35_MediaPlayer_IsSkipNextEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipNextEnabled = (global::System.Boolean)Value;
        }
        private object get_36_MediaPlayer_IsSkipNextAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipNextAllowed;
        }
        private object get_37_MediaPlayer_IsSkipBackEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipBackEnabled;
        }
        private void set_37_MediaPlayer_IsSkipBackEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipBackEnabled = (global::System.Boolean)Value;
        }
        private object get_38_MediaPlayer_IsSkipBackAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipBackAllowed;
        }
        private object get_39_MediaPlayer_IsSkipAheadEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipAheadEnabled;
        }
        private void set_39_MediaPlayer_IsSkipAheadEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipAheadEnabled = (global::System.Boolean)Value;
        }
        private object get_40_MediaPlayer_IsSkipAheadAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipAheadAllowed;
        }
        private object get_41_MediaPlayer_IsScrubbingEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsScrubbingEnabled;
        }
        private void set_41_MediaPlayer_IsScrubbingEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsScrubbingEnabled = (global::System.Boolean)Value;
        }
        private object get_42_MediaPlayer_IsScrubbingAllowed(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsScrubbingAllowed;
        }
        private object get_43_MediaPlayer_IsAudioSelectionVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsAudioSelectionVisible;
        }
        private void set_43_MediaPlayer_IsAudioSelectionVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsAudioSelectionVisible = (global::System.Boolean)Value;
        }
        private object get_44_MediaPlayer_IsCaptionSelectionVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsCaptionSelectionVisible;
        }
        private void set_44_MediaPlayer_IsCaptionSelectionVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsCaptionSelectionVisible = (global::System.Boolean)Value;
        }
        private object get_45_MediaPlayer_IsDurationVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsDurationVisible;
        }
        private void set_45_MediaPlayer_IsDurationVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsDurationVisible = (global::System.Boolean)Value;
        }
        private object get_46_MediaPlayer_IsTimeRemainingVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsTimeRemainingVisible;
        }
        private void set_46_MediaPlayer_IsTimeRemainingVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsTimeRemainingVisible = (global::System.Boolean)Value;
        }
        private object get_47_MediaPlayer_IsFullScreenVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsFullScreenVisible;
        }
        private void set_47_MediaPlayer_IsFullScreenVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsFullScreenVisible = (global::System.Boolean)Value;
        }
        private object get_48_MediaPlayer_IsGoLiveVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsGoLiveVisible;
        }
        private void set_48_MediaPlayer_IsGoLiveVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsGoLiveVisible = (global::System.Boolean)Value;
        }
        private object get_49_MediaPlayer_IsPlayPauseVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsPlayPauseVisible;
        }
        private void set_49_MediaPlayer_IsPlayPauseVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsPlayPauseVisible = (global::System.Boolean)Value;
        }
        private object get_50_MediaPlayer_IsTimeElapsedVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsTimeElapsedVisible;
        }
        private void set_50_MediaPlayer_IsTimeElapsedVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsTimeElapsedVisible = (global::System.Boolean)Value;
        }
        private object get_51_MediaPlayer_IsReplayVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsReplayVisible;
        }
        private void set_51_MediaPlayer_IsReplayVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsReplayVisible = (global::System.Boolean)Value;
        }
        private object get_52_MediaPlayer_IsSkipPreviousVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipPreviousVisible;
        }
        private void set_52_MediaPlayer_IsSkipPreviousVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipPreviousVisible = (global::System.Boolean)Value;
        }
        private object get_53_MediaPlayer_IsSkipNextVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSkipNextVisible;
        }
        private void set_53_MediaPlayer_IsSkipNextVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSkipNextVisible = (global::System.Boolean)Value;
        }
        private object get_54_MediaPlayer_IsSlowMotionVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSlowMotionVisible;
        }
        private void set_54_MediaPlayer_IsSlowMotionVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSlowMotionVisible = (global::System.Boolean)Value;
        }
        private object get_55_MediaPlayer_IsStopVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsStopVisible;
        }
        private void set_55_MediaPlayer_IsStopVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsStopVisible = (global::System.Boolean)Value;
        }
        private object get_56_MediaPlayer_IsTimelineVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsTimelineVisible;
        }
        private void set_56_MediaPlayer_IsTimelineVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsTimelineVisible = (global::System.Boolean)Value;
        }
        private object get_57_MediaPlayer_IsVolumeVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsVolumeVisible;
        }
        private void set_57_MediaPlayer_IsVolumeVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsVolumeVisible = (global::System.Boolean)Value;
        }
        private object get_58_MediaPlayer_IsSignalStrengthVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSignalStrengthVisible;
        }
        private void set_58_MediaPlayer_IsSignalStrengthVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSignalStrengthVisible = (global::System.Boolean)Value;
        }
        private object get_59_MediaPlayer_IsResolutionIndicatorVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsResolutionIndicatorVisible;
        }
        private void set_59_MediaPlayer_IsResolutionIndicatorVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsResolutionIndicatorVisible = (global::System.Boolean)Value;
        }
        private object get_60_MediaPlayer_TimeFormatConverter(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.TimeFormatConverter;
        }
        private void set_60_MediaPlayer_TimeFormatConverter(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.TimeFormatConverter = (global::Windows.UI.Xaml.Data.IValueConverter)Value;
        }
        private object get_61_MediaPlayer_SkipBackInterval(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SkipBackInterval;
        }
        private void set_61_MediaPlayer_SkipBackInterval(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SkipBackInterval = (global::System.Nullable<global::System.TimeSpan>)Value;
        }
        private object get_62_MediaPlayer_SkipAheadInterval(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SkipAheadInterval;
        }
        private void set_62_MediaPlayer_SkipAheadInterval(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SkipAheadInterval = (global::System.Nullable<global::System.TimeSpan>)Value;
        }
        private object get_63_MediaPlayer_VisualMarkers(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.VisualMarkers;
        }
        private object get_64_VisualMarker_Text(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            return that.Text;
        }
        private void set_64_VisualMarker_Text(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_65_VisualMarker_Time(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            return that.Time;
        }
        private void set_65_VisualMarker_Time(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            that.Time = (global::System.TimeSpan)Value;
        }
        private object get_66_VisualMarker_IsSeekable(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            return that.IsSeekable;
        }
        private void set_66_VisualMarker_IsSeekable(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            that.IsSeekable = (global::System.Boolean)Value;
        }
        private object get_67_VisualMarker_Style(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            return that.Style;
        }
        private void set_67_VisualMarker_Style(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VisualMarker)instance;
            that.Style = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_68_MediaPlayer_Markers(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Markers;
        }
        private object get_69_MediaPlayer_AutoLoad(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AutoLoad;
        }
        private void set_69_MediaPlayer_AutoLoad(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AutoLoad = (global::System.Boolean)Value;
        }
        private object get_70_MediaPlayer_SignalStrength(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SignalStrength;
        }
        private void set_70_MediaPlayer_SignalStrength(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SignalStrength = (global::System.Double)Value;
        }
        private object get_71_MediaPlayer_LivePositionBuffer(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.LivePositionBuffer;
        }
        private void set_71_MediaPlayer_LivePositionBuffer(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.LivePositionBuffer = (global::System.TimeSpan)Value;
        }
        private object get_72_MediaPlayer_IsPositionLive(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsPositionLive;
        }
        private object get_73_MediaPlayer_LivePosition(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.LivePosition;
        }
        private void set_73_MediaPlayer_LivePosition(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.LivePosition = (global::System.Nullable<global::System.TimeSpan>)Value;
        }
        private object get_74_MediaPlayer_Duration(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Duration;
        }
        private object get_75_MediaPlayer_IsStartTimeOffset(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsStartTimeOffset;
        }
        private void set_75_MediaPlayer_IsStartTimeOffset(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsStartTimeOffset = (global::System.Boolean)Value;
        }
        private object get_76_MediaPlayer_StartTime(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.StartTime;
        }
        private void set_76_MediaPlayer_StartTime(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.StartTime = (global::System.TimeSpan)Value;
        }
        private object get_77_MediaPlayer_EndTime(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.EndTime;
        }
        private void set_77_MediaPlayer_EndTime(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.EndTime = (global::System.TimeSpan)Value;
        }
        private object get_78_MediaPlayer_TimeRemaining(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.TimeRemaining;
        }
        private object get_79_MediaPlayer_SeekWhileScrubbing(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SeekWhileScrubbing;
        }
        private void set_79_MediaPlayer_SeekWhileScrubbing(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SeekWhileScrubbing = (global::System.Boolean)Value;
        }
        private object get_80_MediaPlayer_ReplayOffset(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.ReplayOffset;
        }
        private void set_80_MediaPlayer_ReplayOffset(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.ReplayOffset = (global::System.TimeSpan)Value;
        }
        private object get_81_MediaPlayer_SlowMotionPlaybackRate(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SlowMotionPlaybackRate;
        }
        private void set_81_MediaPlayer_SlowMotionPlaybackRate(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SlowMotionPlaybackRate = (global::System.Double)Value;
        }
        private object get_82_MediaPlayer_IsSlowMotion(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsSlowMotion;
        }
        private void set_82_MediaPlayer_IsSlowMotion(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsSlowMotion = (global::System.Boolean)Value;
        }
        private object get_83_MediaPlayer_IsCaptionsActive(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsCaptionsActive;
        }
        private void set_83_MediaPlayer_IsCaptionsActive(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsCaptionsActive = (global::System.Boolean)Value;
        }
        private object get_84_MediaPlayer_IsFullScreen(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsFullScreen;
        }
        private void set_84_MediaPlayer_IsFullScreen(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsFullScreen = (global::System.Boolean)Value;
        }
        private object get_85_MediaPlayer_AdvertisingState(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AdvertisingState;
        }
        private void set_85_MediaPlayer_AdvertisingState(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AdvertisingState = (global::Microsoft.PlayerFramework.AdvertisingState)Value;
        }
        private object get_86_MediaPlayer_IsScrubbing(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsScrubbing;
        }
        private object get_87_MediaPlayer_StartupPosition(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.StartupPosition;
        }
        private void set_87_MediaPlayer_StartupPosition(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.StartupPosition = (global::System.Nullable<global::System.TimeSpan>)Value;
        }
        private object get_88_MediaPlayer_MediaEndedBehavior(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.MediaEndedBehavior;
        }
        private void set_88_MediaPlayer_MediaEndedBehavior(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.MediaEndedBehavior = (global::Microsoft.PlayerFramework.MediaEndedBehavior)Value;
        }
        private object get_89_MediaPlayer_UpdateInterval(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.UpdateInterval;
        }
        private void set_89_MediaPlayer_UpdateInterval(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.UpdateInterval = (global::System.TimeSpan)Value;
        }
        private object get_90_MediaPlayer_AvailableCaptions(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AvailableCaptions;
        }
        private object get_91_Caption_Id(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            return that.Id;
        }
        private void set_91_Caption_Id(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            that.Id = (global::System.String)Value;
        }
        private object get_92_Caption_Description(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            return that.Description;
        }
        private void set_92_Caption_Description(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            that.Description = (global::System.String)Value;
        }
        private object get_93_Caption_Payload(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            return that.Payload;
        }
        private void set_93_Caption_Payload(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            that.Payload = (global::System.Object)Value;
        }
        private object get_94_Caption_Source(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            return that.Source;
        }
        private void set_94_Caption_Source(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.Caption)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_95_MediaPlayer_SelectedCaption(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SelectedCaption;
        }
        private void set_95_MediaPlayer_SelectedCaption(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SelectedCaption = (global::Microsoft.PlayerFramework.Caption)Value;
        }
        private object get_96_MediaPlayer_AvailableAudioStreams(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AvailableAudioStreams;
        }
        private object get_97_AudioStream_Name(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.AudioStream)instance;
            return that.Name;
        }
        private void set_97_AudioStream_Name(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.AudioStream)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_98_AudioStream_Language(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.AudioStream)instance;
            return that.Language;
        }
        private void set_98_AudioStream_Language(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.AudioStream)instance;
            that.Language = (global::System.String)Value;
        }
        private object get_99_MediaPlayer_SelectedAudioStream(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SelectedAudioStream;
        }
        private void set_99_MediaPlayer_SelectedAudioStream(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SelectedAudioStream = (global::Microsoft.PlayerFramework.AudioStream)Value;
        }
        private object get_100_MediaPlayer_IsLive(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsLive;
        }
        private void set_100_MediaPlayer_IsLive(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsLive = (global::System.Boolean)Value;
        }
        private object get_101_MediaPlayer_TestForMediaPack(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.TestForMediaPack;
        }
        private void set_101_MediaPlayer_TestForMediaPack(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.TestForMediaPack = (global::System.Boolean)Value;
        }
        private object get_102_MediaPlayer_MediaExtensionManager(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.MediaExtensionManager;
        }
        private void set_102_MediaPlayer_MediaExtensionManager(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.MediaExtensionManager = (global::Windows.Media.MediaExtensionManager)Value;
        }
        private object get_103_MediaPlayer_AspectRatioWidth(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AspectRatioWidth;
        }
        private object get_104_MediaPlayer_AspectRatioHeight(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AspectRatioHeight;
        }
        private object get_105_MediaPlayer_AudioDeviceType(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AudioDeviceType;
        }
        private void set_105_MediaPlayer_AudioDeviceType(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AudioDeviceType = (global::Windows.UI.Xaml.Media.AudioDeviceType)Value;
        }
        private object get_106_MediaPlayer_PlayToSource(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.PlayToSource;
        }
        private object get_107_MediaPlayer_DefaultPlaybackRate(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.DefaultPlaybackRate;
        }
        private void set_107_MediaPlayer_DefaultPlaybackRate(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.DefaultPlaybackRate = (global::System.Double)Value;
        }
        private object get_108_MediaPlayer_IsAudioOnly(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsAudioOnly;
        }
        private object get_109_MediaPlayer_IsLooping(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsLooping;
        }
        private void set_109_MediaPlayer_IsLooping(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsLooping = (global::System.Boolean)Value;
        }
        private object get_110_MediaPlayer_PosterSource(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.PosterSource;
        }
        private void set_110_MediaPlayer_PosterSource(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.PosterSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_111_MediaPlayer_ActualStereo3DVideoPackingMode(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.ActualStereo3DVideoPackingMode;
        }
        private object get_112_MediaPlayer_Stereo3DVideoPackingMode(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Stereo3DVideoPackingMode;
        }
        private void set_112_MediaPlayer_Stereo3DVideoPackingMode(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Stereo3DVideoPackingMode = (global::Windows.UI.Xaml.Media.Stereo3DVideoPackingMode)Value;
        }
        private object get_113_MediaPlayer_Stereo3DVideoRenderMode(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Stereo3DVideoRenderMode;
        }
        private void set_113_MediaPlayer_Stereo3DVideoRenderMode(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Stereo3DVideoRenderMode = (global::Windows.UI.Xaml.Media.Stereo3DVideoRenderMode)Value;
        }
        private object get_114_MediaPlayer_IsStereo3DVideo(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsStereo3DVideo;
        }
        private object get_115_MediaPlayer_RealTimePlayback(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.RealTimePlayback;
        }
        private void set_115_MediaPlayer_RealTimePlayback(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.RealTimePlayback = (global::System.Boolean)Value;
        }
        private object get_116_MediaPlayer_ProtectionManager(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.ProtectionManager;
        }
        private void set_116_MediaPlayer_ProtectionManager(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.ProtectionManager = (global::Windows.Media.Protection.MediaProtectionManager)Value;
        }
        private object get_117_MediaPlayer_AudioStreamCount(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AudioStreamCount;
        }
        private object get_118_MediaPlayer_AudioStreamIndex(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AudioStreamIndex;
        }
        private void set_118_MediaPlayer_AudioStreamIndex(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AudioStreamIndex = (global::System.Nullable<global::System.Int32>)Value;
        }
        private object get_119_MediaPlayer_AutoPlay(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AutoPlay;
        }
        private void set_119_MediaPlayer_AutoPlay(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AutoPlay = (global::System.Boolean)Value;
        }
        private object get_120_MediaPlayer_BufferingProgress(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.BufferingProgress;
        }
        private object get_121_MediaPlayer_CanPause(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.CanPause;
        }
        private object get_122_MediaPlayer_CanSeek(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.CanSeek;
        }
        private object get_123_MediaPlayer_Balance(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Balance;
        }
        private void set_123_MediaPlayer_Balance(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Balance = (global::System.Double)Value;
        }
        private object get_124_MediaPlayer_DownloadProgress(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.DownloadProgress;
        }
        private object get_125_MediaPlayer_DownloadProgressOffset(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.DownloadProgressOffset;
        }
        private object get_126_MediaPlayer_IsMuted(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsMuted;
        }
        private void set_126_MediaPlayer_IsMuted(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsMuted = (global::System.Boolean)Value;
        }
        private object get_127_MediaPlayer_NaturalDuration(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.NaturalDuration;
        }
        private object get_128_MediaPlayer_NaturalVideoHeight(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.NaturalVideoHeight;
        }
        private object get_129_MediaPlayer_NaturalVideoWidth(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.NaturalVideoWidth;
        }
        private object get_130_MediaPlayer_PlaybackRate(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.PlaybackRate;
        }
        private void set_130_MediaPlayer_PlaybackRate(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.PlaybackRate = (global::System.Double)Value;
        }
        private object get_131_MediaPlayer_Position(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Position;
        }
        private void set_131_MediaPlayer_Position(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Position = (global::System.TimeSpan)Value;
        }
        private object get_132_MediaPlayer_CurrentState(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.CurrentState;
        }
        private object get_133_MediaPlayer_Source(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Source;
        }
        private void set_133_MediaPlayer_Source(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_134_MediaPlayer_Volume(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Volume;
        }
        private void set_134_MediaPlayer_Volume(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Volume = (global::System.Double)Value;
        }
        private object get_135_MediaPlayer_SupportedPlaybackRates(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.SupportedPlaybackRates;
        }
        private void set_135_MediaPlayer_SupportedPlaybackRates(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.SupportedPlaybackRates = (global::System.Collections.Generic.IList<global::System.Double>)Value;
        }
        private object get_136_MediaPlayer_AllowMediaStartingDeferrals(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AllowMediaStartingDeferrals;
        }
        private void set_136_MediaPlayer_AllowMediaStartingDeferrals(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AllowMediaStartingDeferrals = (global::System.Boolean)Value;
        }
        private object get_137_MediaPlayer_ControlPanel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.ControlPanel;
        }
        private object get_138_MediaPlayer_AutoHideInterval(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.AutoHideInterval;
        }
        private void set_138_MediaPlayer_AutoHideInterval(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.AutoHideInterval = (global::System.TimeSpan)Value;
        }
        private object get_139_MediaPlayer_Containers(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.Containers;
        }
        private void set_139_MediaPlayer_Containers(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.Containers = (global::System.Collections.Generic.IList<global::Windows.UI.Xaml.UIElement>)Value;
        }
        private object get_140_MediaPlayer_InteractiveViewModel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.InteractiveViewModel;
        }
        private void set_140_MediaPlayer_InteractiveViewModel(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.InteractiveViewModel = (global::Microsoft.PlayerFramework.IInteractiveViewModel)Value;
        }
        private object get_141_MediaPlayer_DefaultInteractiveViewModel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.DefaultInteractiveViewModel;
        }
        private void set_141_MediaPlayer_DefaultInteractiveViewModel(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.DefaultInteractiveViewModel = (global::Microsoft.PlayerFramework.IInteractiveViewModel)Value;
        }
        private object get_142_MediaPlayer_InteractiveActivationMode(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.InteractiveActivationMode;
        }
        private void set_142_MediaPlayer_InteractiveActivationMode(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.InteractiveActivationMode = (global::Microsoft.PlayerFramework.InteractionType)Value;
        }
        private object get_143_MediaPlayer_InteractiveDeactivationMode(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.InteractiveDeactivationMode;
        }
        private void set_143_MediaPlayer_InteractiveDeactivationMode(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.InteractiveDeactivationMode = (global::Microsoft.PlayerFramework.InteractionType)Value;
        }
        private object get_144_MediaPlayer_IsInteractive(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.IsInteractive;
        }
        private void set_144_MediaPlayer_IsInteractive(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            that.IsInteractive = (global::System.Boolean)Value;
        }
        private object get_145_MediaPlayer_PlayerState(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayer)instance;
            return that.PlayerState;
        }
        private object get_146_MediaPlayer_ResourceString(object instance)
        {
            return global::Microsoft.PlayerFramework.MediaPlayer.GetResourceString((global::System.String)instance);
        }
        private object get_147_RingSlice_EndAngle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            return that.EndAngle;
        }
        private void set_147_RingSlice_EndAngle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            that.EndAngle = (global::System.Double)Value;
        }
        private object get_148_RingSlice_InnerRadius(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            return that.InnerRadius;
        }
        private void set_148_RingSlice_InnerRadius(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            that.InnerRadius = (global::System.Double)Value;
        }
        private object get_149_RingSlice_Radius(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            return that.Radius;
        }
        private void set_149_RingSlice_Radius(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            that.Radius = (global::System.Double)Value;
        }
        private object get_150_RingSlice_StartAngle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            return that.StartAngle;
        }
        private void set_150_RingSlice_StartAngle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            that.StartAngle = (global::System.Double)Value;
        }
        private object get_151_RingSlice_Center(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            return that.Center;
        }
        private void set_151_RingSlice_Center(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            that.Center = (global::System.Nullable<global::Windows.Foundation.Point>)Value;
        }
        private object get_152_CustomAppBar_IsOpen(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            return that.IsOpen;
        }
        private void set_152_CustomAppBar_IsOpen(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_153_CustomAppBar_CanOpen(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            return that.CanOpen;
        }
        private void set_153_CustomAppBar_CanOpen(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            that.CanOpen = (global::System.Boolean)Value;
        }
        private object get_154_CustomAppBar_CanDismiss(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            return that.CanDismiss;
        }
        private void set_154_CustomAppBar_CanDismiss(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            that.CanDismiss = (global::System.Boolean)Value;
        }
        private object get_155_CustomAppBar_CanOpenInSnappedView(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            return that.CanOpenInSnappedView;
        }
        private void set_155_CustomAppBar_CanOpenInSnappedView(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            that.CanOpenInSnappedView = (global::System.Boolean)Value;
        }
        private object get_156_CustomAppBar_IsLightDismissEnabled(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            return that.IsLightDismissEnabled;
        }
        private void set_156_CustomAppBar_IsLightDismissEnabled(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            that.IsLightDismissEnabled = (global::System.Boolean)Value;
        }
        private object get_157_FrameworkElementExtensions_ClipToBounds(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetClipToBounds((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_157_FrameworkElementExtensions_ClipToBounds(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetClipToBounds((global::Windows.UI.Xaml.DependencyObject)instance, (System.Boolean)Value);
                    }
        private object get_158_FrameworkElementExtensions_ClipToBoundsHandler(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetClipToBoundsHandler((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_158_FrameworkElementExtensions_ClipToBoundsHandler(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetClipToBoundsHandler((global::Windows.UI.Xaml.DependencyObject)instance, (WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler)Value);
                    }
        private object get_159_FrameworkElementExtensions_Cursor(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetCursor((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_159_FrameworkElementExtensions_Cursor(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetCursor((global::Windows.UI.Xaml.DependencyObject)instance, (Windows.UI.Core.CoreCursor)Value);
                    }
        private object get_160_FrameworkElementExtensions_SystemCursor(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetSystemCursor((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_160_FrameworkElementExtensions_SystemCursor(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetSystemCursor((global::Windows.UI.Xaml.DependencyObject)instance, (Windows.UI.Core.CoreCursorType)Value);
                    }
        private object get_161_FrameworkElementExtensions_CursorDisplayHandler(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetCursorDisplayHandler((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_161_FrameworkElementExtensions_CursorDisplayHandler(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetCursorDisplayHandler((global::Windows.UI.Xaml.DependencyObject)instance, (WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler)Value);
                    }
        private object get_162_RadAutoCompleteBox_DropDownPlacement(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.DropDownPlacement;
        }
        private void set_162_RadAutoCompleteBox_DropDownPlacement(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.DropDownPlacement = (global::Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxPlacementMode)Value;
        }
        private object get_163_RadAutoCompleteBox_FilterMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.FilterMode;
        }
        private void set_163_RadAutoCompleteBox_FilterMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.FilterMode = (global::Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxFilterMode)Value;
        }
        private object get_164_RadAutoCompleteBox_IsDropDownOpen(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.IsDropDownOpen;
        }
        private void set_164_RadAutoCompleteBox_IsDropDownOpen(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.IsDropDownOpen = (global::System.Boolean)Value;
        }
        private object get_165_RadAutoCompleteBox_Text(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.Text;
        }
        private void set_165_RadAutoCompleteBox_Text(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_166_RadAutoCompleteBox_FilterComparisonMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.FilterComparisonMode;
        }
        private void set_166_RadAutoCompleteBox_FilterComparisonMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.FilterComparisonMode = (global::System.StringComparison)Value;
        }
        private object get_167_RadAutoCompleteBox_FilterMemberPath(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.FilterMemberPath;
        }
        private void set_167_RadAutoCompleteBox_FilterMemberPath(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.FilterMemberPath = (global::System.String)Value;
        }
        private object get_168_RadAutoCompleteBox_DisplayMemberPath(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.DisplayMemberPath;
        }
        private void set_168_RadAutoCompleteBox_DisplayMemberPath(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.DisplayMemberPath = (global::System.String)Value;
        }
        private object get_169_RadAutoCompleteBox_FilterStartThreshold(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.FilterStartThreshold;
        }
        private void set_169_RadAutoCompleteBox_FilterStartThreshold(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.FilterStartThreshold = (global::System.Int32)Value;
        }
        private object get_170_RadAutoCompleteBox_FilterDelay(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.FilterDelay;
        }
        private void set_170_RadAutoCompleteBox_FilterDelay(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.FilterDelay = (global::System.TimeSpan)Value;
        }
        private object get_171_RadAutoCompleteBox_FilterMemberProvider(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.FilterMemberProvider;
        }
        private void set_171_RadAutoCompleteBox_FilterMemberProvider(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.FilterMemberProvider = (global::System.Func<global::System.Object, global::System.String>)Value;
        }
        private object get_172_RadAutoCompleteBox_FilteredItems(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.FilteredItems;
        }
        private object get_173_RadAutoCompleteBox_ItemsSource(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.ItemsSource;
        }
        private void set_173_RadAutoCompleteBox_ItemsSource(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.ItemsSource = (global::System.Collections.IEnumerable)Value;
        }
        private object get_174_RadAutoCompleteBox_ItemTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.ItemTemplate;
        }
        private void set_174_RadAutoCompleteBox_ItemTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.ItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_175_RadAutoCompleteBox_AutosuggestFirstItem(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.AutosuggestFirstItem;
        }
        private void set_175_RadAutoCompleteBox_AutosuggestFirstItem(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.AutosuggestFirstItem = (global::System.Boolean)Value;
        }
        private object get_176_RadAutoCompleteBox_DropDownMaxHeight(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.DropDownMaxHeight;
        }
        private void set_176_RadAutoCompleteBox_DropDownMaxHeight(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.DropDownMaxHeight = (global::System.Double)Value;
        }
        private object get_177_RadAutoCompleteBox_WatermarkContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.WatermarkContent;
        }
        private void set_177_RadAutoCompleteBox_WatermarkContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.WatermarkContent = (global::System.Object)Value;
        }
        private object get_178_RadAutoCompleteBox_WatermarkTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.WatermarkTemplate;
        }
        private void set_178_RadAutoCompleteBox_WatermarkTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            that.WatermarkTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_179_RadAutoCompleteBox_SelectedItem(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox)instance;
            return that.SelectedItem;
        }
        private object get_180_RadHeaderedControl_Header(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            return that.Header;
        }
        private void set_180_RadHeaderedControl_Header(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_181_RadHeaderedControl_HeaderTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            return that.HeaderTemplate;
        }
        private void set_181_RadHeaderedControl_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_182_RadHeaderedControl_HeaderStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            return that.HeaderStyle;
        }
        private void set_182_RadHeaderedControl_HeaderStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            that.HeaderStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_183_RadControl_CurrentVisualState(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadControl)instance;
            return that.CurrentVisualState;
        }
        private object get_184_RadAutoCompleteBox_IsTextMatchHighlightEnabled(object instance)
        {
            return global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.GetIsTextMatchHighlightEnabled((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_184_RadAutoCompleteBox_IsTextMatchHighlightEnabled(object instance, object Value)
        {
            global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.SetIsTextMatchHighlightEnabled((global::Windows.UI.Xaml.DependencyObject)instance, (System.Boolean)Value);
                    }
        private object get_185_RadAutoCompleteBox_TextMatchHighlightStyle(object instance)
        {
            return global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.GetTextMatchHighlightStyle((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_185_RadAutoCompleteBox_TextMatchHighlightStyle(object instance, object Value)
        {
            global::Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.SetTextMatchHighlightStyle((global::Windows.UI.Xaml.DependencyObject)instance, (Telerik.UI.Xaml.Controls.Input.HighlightStyle)Value);
                    }
        private object get_186_AdControl_AdUnitId(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.AdUnitId;
        }
        private void set_186_AdControl_AdUnitId(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.AdUnitId = (global::System.String)Value;
        }
        private object get_187_AdControl_ApplicationId(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.ApplicationId;
        }
        private void set_187_AdControl_ApplicationId(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.ApplicationId = (global::System.String)Value;
        }
        private object get_188_AdControl_Latitude(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.Latitude;
        }
        private void set_188_AdControl_Latitude(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.Latitude = (global::System.Double)Value;
        }
        private object get_189_AdControl_Longitude(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.Longitude;
        }
        private void set_189_AdControl_Longitude(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.Longitude = (global::System.Double)Value;
        }
        private object get_190_AdControl_IsEngaged(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.IsEngaged;
        }
        private object get_191_AdControl_IsAutoRefreshEnabled(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.IsAutoRefreshEnabled;
        }
        private void set_191_AdControl_IsAutoRefreshEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.IsAutoRefreshEnabled = (global::System.Boolean)Value;
        }
        private object get_192_AdControl_IsPerformanceScrollingEnabled(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.IsPerformanceScrollingEnabled;
        }
        private void set_192_AdControl_IsPerformanceScrollingEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.IsPerformanceScrollingEnabled = (global::System.Boolean)Value;
        }
        private object get_193_AdControl_UseStaticAnchor(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.UseStaticAnchor;
        }
        private void set_193_AdControl_UseStaticAnchor(object instance, object Value)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            that.UseStaticAnchor = (global::System.Boolean)Value;
        }
        private object get_194_AdControl_IsSuspended(object instance)
        {
            var that = (global::Microsoft.Advertising.WinRT.UI.AdControl)instance;
            return that.IsSuspended;
        }
        private object get_195_ControlPanel_ViewModel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.ViewModel;
        }
        private void set_195_ControlPanel_ViewModel(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.ViewModel = (global::Microsoft.PlayerFramework.IInteractiveViewModel)Value;
        }
        private object get_196_ControlPanel_GoLiveButtonVisibility(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.GoLiveButtonVisibility;
        }
        private void set_196_ControlPanel_GoLiveButtonVisibility(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.GoLiveButtonVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_197_ControlPanel_IsGoLiveButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsGoLiveButtonVisible;
        }
        private void set_197_ControlPanel_IsGoLiveButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsGoLiveButtonVisible = (global::System.Boolean)Value;
        }
        private object get_198_ControlPanel_IsAudioSelectionButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsAudioSelectionButtonVisible;
        }
        private void set_198_ControlPanel_IsAudioSelectionButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsAudioSelectionButtonVisible = (global::System.Boolean)Value;
        }
        private object get_199_ControlPanel_IsCaptionSelectionButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsCaptionSelectionButtonVisible;
        }
        private void set_199_ControlPanel_IsCaptionSelectionButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsCaptionSelectionButtonVisible = (global::System.Boolean)Value;
        }
        private object get_200_ControlPanel_IsTimeElapsedButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsTimeElapsedButtonVisible;
        }
        private void set_200_ControlPanel_IsTimeElapsedButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsTimeElapsedButtonVisible = (global::System.Boolean)Value;
        }
        private object get_201_ControlPanel_IsDurationButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsDurationButtonVisible;
        }
        private void set_201_ControlPanel_IsDurationButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsDurationButtonVisible = (global::System.Boolean)Value;
        }
        private object get_202_ControlPanel_IsTimeRemainingButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsTimeRemainingButtonVisible;
        }
        private void set_202_ControlPanel_IsTimeRemainingButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsTimeRemainingButtonVisible = (global::System.Boolean)Value;
        }
        private object get_203_ControlPanel_IsSkipNextButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsSkipNextButtonVisible;
        }
        private void set_203_ControlPanel_IsSkipNextButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsSkipNextButtonVisible = (global::System.Boolean)Value;
        }
        private object get_204_ControlPanel_IsSkipPreviousButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsSkipPreviousButtonVisible;
        }
        private void set_204_ControlPanel_IsSkipPreviousButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsSkipPreviousButtonVisible = (global::System.Boolean)Value;
        }
        private object get_205_ControlPanel_IsSkipAheadButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsSkipAheadButtonVisible;
        }
        private void set_205_ControlPanel_IsSkipAheadButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsSkipAheadButtonVisible = (global::System.Boolean)Value;
        }
        private object get_206_ControlPanel_IsSkipBackButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsSkipBackButtonVisible;
        }
        private void set_206_ControlPanel_IsSkipBackButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsSkipBackButtonVisible = (global::System.Boolean)Value;
        }
        private object get_207_ControlPanel_IsFastForwardButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsFastForwardButtonVisible;
        }
        private void set_207_ControlPanel_IsFastForwardButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsFastForwardButtonVisible = (global::System.Boolean)Value;
        }
        private object get_208_ControlPanel_IsStopButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsStopButtonVisible;
        }
        private void set_208_ControlPanel_IsStopButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsStopButtonVisible = (global::System.Boolean)Value;
        }
        private object get_209_ControlPanel_IsRewindButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsRewindButtonVisible;
        }
        private void set_209_ControlPanel_IsRewindButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsRewindButtonVisible = (global::System.Boolean)Value;
        }
        private object get_210_ControlPanel_IsReplayButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsReplayButtonVisible;
        }
        private void set_210_ControlPanel_IsReplayButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsReplayButtonVisible = (global::System.Boolean)Value;
        }
        private object get_211_ControlPanel_IsResolutionIndicatorVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsResolutionIndicatorVisible;
        }
        private void set_211_ControlPanel_IsResolutionIndicatorVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsResolutionIndicatorVisible = (global::System.Boolean)Value;
        }
        private object get_212_ControlPanel_IsSignalStrengthVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsSignalStrengthVisible;
        }
        private void set_212_ControlPanel_IsSignalStrengthVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsSignalStrengthVisible = (global::System.Boolean)Value;
        }
        private object get_213_ControlPanel_IsFullScreenButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsFullScreenButtonVisible;
        }
        private void set_213_ControlPanel_IsFullScreenButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsFullScreenButtonVisible = (global::System.Boolean)Value;
        }
        private object get_214_ControlPanel_IsMuteButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsMuteButtonVisible;
        }
        private void set_214_ControlPanel_IsMuteButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsMuteButtonVisible = (global::System.Boolean)Value;
        }
        private object get_215_ControlPanel_IsSlowMotionButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsSlowMotionButtonVisible;
        }
        private void set_215_ControlPanel_IsSlowMotionButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsSlowMotionButtonVisible = (global::System.Boolean)Value;
        }
        private object get_216_ControlPanel_IsPlayPauseButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsPlayPauseButtonVisible;
        }
        private void set_216_ControlPanel_IsPlayPauseButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsPlayPauseButtonVisible = (global::System.Boolean)Value;
        }
        private object get_217_ControlPanel_IsVolumeButtonVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsVolumeButtonVisible;
        }
        private void set_217_ControlPanel_IsVolumeButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsVolumeButtonVisible = (global::System.Boolean)Value;
        }
        private object get_218_ControlPanel_IsVolumeSliderVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsVolumeSliderVisible;
        }
        private void set_218_ControlPanel_IsVolumeSliderVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsVolumeSliderVisible = (global::System.Boolean)Value;
        }
        private object get_219_ControlPanel_IsTimelineVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.IsTimelineVisible;
        }
        private void set_219_ControlPanel_IsTimelineVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            that.IsTimelineVisible = (global::System.Boolean)Value;
        }
        private object get_220_ControlPanel_LeftItemsPanel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.LeftItemsPanel;
        }
        private object get_221_ControlPanel_RightItemsPanel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ControlPanel)instance;
            return that.RightItemsPanel;
        }
        private object get_222_BoolToVisibilityConverter_Inverse(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.BoolToVisibilityConverter)instance;
            return that.Inverse;
        }
        private void set_222_BoolToVisibilityConverter_Inverse(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.BoolToVisibilityConverter)instance;
            that.Inverse = (global::System.Boolean)Value;
        }
        private object get_223_MediaPlayerButton_ViewModel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.ViewModel;
        }
        private void set_223_MediaPlayerButton_ViewModel(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.ViewModel = (global::Microsoft.PlayerFramework.IInteractiveViewModel)Value;
        }
        private object get_224_MediaPlayerButton_Command(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.Command;
        }
        private void set_224_MediaPlayerButton_Command(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.Command = (global::Microsoft.PlayerFramework.ViewModelCommand)Value;
        }
        private object get_225_MediaPlayerButton_Size(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.Size;
        }
        private void set_225_MediaPlayerButton_Size(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.Size = (global::System.Double)Value;
        }
        private object get_226_MediaPlayerButton_StrokeThickness(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.StrokeThickness;
        }
        private void set_226_MediaPlayerButton_StrokeThickness(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_227_MediaPlayerButton_ContentTransform(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.ContentTransform;
        }
        private void set_227_MediaPlayerButton_ContentTransform(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.ContentTransform = (global::Windows.UI.Xaml.Media.Transform)Value;
        }
        private object get_228_MediaPlayerButton_ContentHover(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.ContentHover;
        }
        private void set_228_MediaPlayerButton_ContentHover(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.ContentHover = (global::System.Object)Value;
        }
        private object get_229_MediaPlayerButton_ContentUnhover(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.ContentUnhover;
        }
        private void set_229_MediaPlayerButton_ContentUnhover(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.ContentUnhover = (global::System.Object)Value;
        }
        private object get_230_MediaPlayerButton_IsSelected(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.IsSelected;
        }
        private void set_230_MediaPlayerButton_IsSelected(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_231_MediaPlayerButton_SelectedContent(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.SelectedContent;
        }
        private void set_231_MediaPlayerButton_SelectedContent(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.SelectedContent = (global::System.Object)Value;
        }
        private object get_232_MediaPlayerButton_SelectedContentTemplate(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.SelectedContentTemplate;
        }
        private void set_232_MediaPlayerButton_SelectedContentTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.SelectedContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_233_MediaPlayerButton_UnselectedContent(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.UnselectedContent;
        }
        private void set_233_MediaPlayerButton_UnselectedContent(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.UnselectedContent = (global::System.Object)Value;
        }
        private object get_234_MediaPlayerButton_UnselectedContentTemplate(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.UnselectedContentTemplate;
        }
        private void set_234_MediaPlayerButton_UnselectedContentTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.UnselectedContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_235_MediaPlayerButton_SelectedName(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.SelectedName;
        }
        private void set_235_MediaPlayerButton_SelectedName(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.SelectedName = (global::System.String)Value;
        }
        private object get_236_MediaPlayerButton_UnselectedName(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            return that.UnselectedName;
        }
        private void set_236_MediaPlayerButton_UnselectedName(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerButton)instance;
            that.UnselectedName = (global::System.String)Value;
        }
        private object get_237_Timeline_ViewModel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.Timeline)instance;
            return that.ViewModel;
        }
        private void set_237_Timeline_ViewModel(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.Timeline)instance;
            that.ViewModel = (global::Microsoft.PlayerFramework.IInteractiveViewModel)Value;
        }
        private object get_238_Timeline_SliderStyle(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.Timeline)instance;
            return that.SliderStyle;
        }
        private void set_238_Timeline_SliderStyle(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.Timeline)instance;
            that.SliderStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_239_SeekableSlider_SliderTrackDecreasePressedBackground(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderTrackDecreasePressedBackground;
        }
        private void set_239_SeekableSlider_SliderTrackDecreasePressedBackground(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderTrackDecreasePressedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_240_SeekableSlider_SliderTrackDecreasePointerOverBackground(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderTrackDecreasePointerOverBackground;
        }
        private void set_240_SeekableSlider_SliderTrackDecreasePointerOverBackground(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderTrackDecreasePointerOverBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_241_SeekableSlider_SliderThumbStyle(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderThumbStyle;
        }
        private void set_241_SeekableSlider_SliderThumbStyle(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderThumbStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_242_SeekableSlider_IsScrubbing(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.IsScrubbing;
        }
        private object get_243_SeekableSlider_ActualValue(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.ActualValue;
        }
        private void set_243_SeekableSlider_ActualValue(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.ActualValue = (global::System.Double)Value;
        }
        private object get_244_SeekableSlider_MaxValue(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.MaxValue;
        }
        private void set_244_SeekableSlider_MaxValue(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.MaxValue = (global::System.Double)Value;
        }
        private object get_245_SeekableSlider_HorizontalBackgroundContent(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.HorizontalBackgroundContent;
        }
        private void set_245_SeekableSlider_HorizontalBackgroundContent(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.HorizontalBackgroundContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_246_SeekableSlider_HorizontalForegroundContent(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.HorizontalForegroundContent;
        }
        private void set_246_SeekableSlider_HorizontalForegroundContent(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.HorizontalForegroundContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_247_SeekableSlider_VerticalBackgroundContent(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.VerticalBackgroundContent;
        }
        private void set_247_SeekableSlider_VerticalBackgroundContent(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.VerticalBackgroundContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_248_SeekableSlider_VerticalForegroundContent(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.VerticalForegroundContent;
        }
        private void set_248_SeekableSlider_VerticalForegroundContent(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.VerticalForegroundContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_249_SeekableSlider_SliderTrackPressedBackground(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderTrackPressedBackground;
        }
        private void set_249_SeekableSlider_SliderTrackPressedBackground(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderTrackPressedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_250_SeekableSlider_SliderThumbPressedBackground(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderThumbPressedBackground;
        }
        private void set_250_SeekableSlider_SliderThumbPressedBackground(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderThumbPressedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_251_SeekableSlider_SliderThumbPressedBorder(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderThumbPressedBorder;
        }
        private void set_251_SeekableSlider_SliderThumbPressedBorder(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderThumbPressedBorder = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_252_SeekableSlider_SliderDisabledBorder(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderDisabledBorder;
        }
        private void set_252_SeekableSlider_SliderDisabledBorder(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderDisabledBorder = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_253_SeekableSlider_SliderTrackDecreaseDisabledBackground(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderTrackDecreaseDisabledBackground;
        }
        private void set_253_SeekableSlider_SliderTrackDecreaseDisabledBackground(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderTrackDecreaseDisabledBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_254_SeekableSlider_SliderTrackDisabledBackground(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderTrackDisabledBackground;
        }
        private void set_254_SeekableSlider_SliderTrackDisabledBackground(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderTrackDisabledBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_255_SeekableSlider_SliderThumbDisabledBackground(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderThumbDisabledBackground;
        }
        private void set_255_SeekableSlider_SliderThumbDisabledBackground(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderThumbDisabledBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_256_SeekableSlider_SliderTrackPointerOverBackground(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderTrackPointerOverBackground;
        }
        private void set_256_SeekableSlider_SliderTrackPointerOverBackground(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderTrackPointerOverBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_257_SeekableSlider_SliderThumbPointerOverBackground(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderThumbPointerOverBackground;
        }
        private void set_257_SeekableSlider_SliderThumbPointerOverBackground(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderThumbPointerOverBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_258_SeekableSlider_SliderThumbPointerOverBorder(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderThumbPointerOverBorder;
        }
        private void set_258_SeekableSlider_SliderThumbPointerOverBorder(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderThumbPointerOverBorder = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_259_SeekableSlider_SliderThumbBackground(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            return that.SliderThumbBackground;
        }
        private void set_259_SeekableSlider_SliderThumbBackground(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.SeekableSlider)instance;
            that.SliderThumbBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_260_InteractiveViewModel_MediaPlayer(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.MediaPlayer;
        }
        private void set_260_InteractiveViewModel_MediaPlayer(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            that.MediaPlayer = (global::Microsoft.PlayerFramework.MediaPlayer)Value;
        }
        private object get_261_InteractiveViewModel_AvailableCaptions(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.AvailableCaptions;
        }
        private object get_262_InteractiveViewModel_SelectedCaption(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.SelectedCaption;
        }
        private void set_262_InteractiveViewModel_SelectedCaption(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            that.SelectedCaption = (global::Microsoft.PlayerFramework.Caption)Value;
        }
        private object get_263_InteractiveViewModel_AvailableAudioStreams(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.AvailableAudioStreams;
        }
        private object get_264_InteractiveViewModel_SelectedAudioStream(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.SelectedAudioStream;
        }
        private void set_264_InteractiveViewModel_SelectedAudioStream(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            that.SelectedAudioStream = (global::Microsoft.PlayerFramework.AudioStream)Value;
        }
        private object get_265_InteractiveViewModel_VisualMarkers(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.VisualMarkers;
        }
        private object get_266_InteractiveViewModel_IsGoLiveEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsGoLiveEnabled;
        }
        private object get_267_InteractiveViewModel_IsPlayResumeEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsPlayResumeEnabled;
        }
        private object get_268_InteractiveViewModel_IsPauseEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsPauseEnabled;
        }
        private object get_269_InteractiveViewModel_IsStopEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsStopEnabled;
        }
        private object get_270_InteractiveViewModel_IsReplayEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsReplayEnabled;
        }
        private object get_271_InteractiveViewModel_IsAudioSelectionEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsAudioSelectionEnabled;
        }
        private object get_272_InteractiveViewModel_IsCaptionSelectionEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsCaptionSelectionEnabled;
        }
        private object get_273_InteractiveViewModel_IsRewindEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsRewindEnabled;
        }
        private object get_274_InteractiveViewModel_IsFastForwardEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsFastForwardEnabled;
        }
        private object get_275_InteractiveViewModel_IsSlowMotionEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsSlowMotionEnabled;
        }
        private object get_276_InteractiveViewModel_IsSeekEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsSeekEnabled;
        }
        private object get_277_InteractiveViewModel_IsSkipPreviousEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsSkipPreviousEnabled;
        }
        private object get_278_InteractiveViewModel_IsSkipNextEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsSkipNextEnabled;
        }
        private object get_279_InteractiveViewModel_IsSkipBackEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsSkipBackEnabled;
        }
        private object get_280_InteractiveViewModel_IsSkipAheadEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsSkipAheadEnabled;
        }
        private object get_281_InteractiveViewModel_IsScrubbingEnabled(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.IsScrubbingEnabled;
        }
        private object get_282_InteractiveViewModel_BufferingProgress(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.BufferingProgress;
        }
        private object get_283_InteractiveViewModel_DownloadProgress(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.DownloadProgress;
        }
        private object get_284_InteractiveViewModel_StartTime(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.StartTime;
        }
        private object get_285_InteractiveViewModel_EndTime(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.EndTime;
        }
        private object get_286_InteractiveViewModel_Duration(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.Duration;
        }
        private object get_287_InteractiveViewModel_TimeRemaining(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.TimeRemaining;
        }
        private object get_288_InteractiveViewModel_Position(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.Position;
        }
        private object get_289_InteractiveViewModel_MaxPosition(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.MaxPosition;
        }
        private object get_290_InteractiveViewModel_CurrentState(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.CurrentState;
        }
        private object get_291_InteractiveViewModel_TimeFormatConverter(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.TimeFormatConverter;
        }
        private object get_292_InteractiveViewModel_SkipBackInterval(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.SkipBackInterval;
        }
        private object get_293_InteractiveViewModel_SkipAheadInterval(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.SkipAheadInterval;
        }
        private object get_294_InteractiveViewModel_SignalStrength(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.SignalStrength;
        }
        private object get_295_InteractiveViewModel_MediaQuality(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModel)instance;
            return that.MediaQuality;
        }
        private object get_296_InteractiveViewModelBase_SkipPreviousThreshold(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModelBase)instance;
            return that.SkipPreviousThreshold;
        }
        private void set_296_InteractiveViewModelBase_SkipPreviousThreshold(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModelBase)instance;
            that.SkipPreviousThreshold = (global::System.TimeSpan)Value;
        }
        private object get_297_InteractiveViewModelBase_IsMuted(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModelBase)instance;
            return that.IsMuted;
        }
        private void set_297_InteractiveViewModelBase_IsMuted(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModelBase)instance;
            that.IsMuted = (global::System.Boolean)Value;
        }
        private object get_298_InteractiveViewModelBase_IsFullScreen(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModelBase)instance;
            return that.IsFullScreen;
        }
        private void set_298_InteractiveViewModelBase_IsFullScreen(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModelBase)instance;
            that.IsFullScreen = (global::System.Boolean)Value;
        }
        private object get_299_InteractiveViewModelBase_IsSlowMotion(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModelBase)instance;
            return that.IsSlowMotion;
        }
        private void set_299_InteractiveViewModelBase_IsSlowMotion(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModelBase)instance;
            that.IsSlowMotion = (global::System.Boolean)Value;
        }
        private object get_300_InteractiveViewModelBase_Volume(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModelBase)instance;
            return that.Volume;
        }
        private void set_300_InteractiveViewModelBase_Volume(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.InteractiveViewModelBase)instance;
            that.Volume = (global::System.Double)Value;
        }
        private object get_301_MediaPlayerControl_ViewModel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerControl)instance;
            return that.ViewModel;
        }
        private void set_301_MediaPlayerControl_ViewModel(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerControl)instance;
            that.ViewModel = (global::Microsoft.PlayerFramework.IInteractiveViewModel)Value;
        }
        private object get_302_MediaPlayerToggleButton_Size(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerToggleButton)instance;
            return that.Size;
        }
        private void set_302_MediaPlayerToggleButton_Size(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerToggleButton)instance;
            that.Size = (global::System.Double)Value;
        }
        private object get_303_MediaPlayerToggleButton_Command(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerToggleButton)instance;
            return that.Command;
        }
        private void set_303_MediaPlayerToggleButton_Command(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerToggleButton)instance;
            that.Command = (global::Microsoft.PlayerFramework.ViewModelCommand)Value;
        }
        private object get_304_MediaPlayerToggleButton_ViewModel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerToggleButton)instance;
            return that.ViewModel;
        }
        private void set_304_MediaPlayerToggleButton_ViewModel(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerToggleButton)instance;
            that.ViewModel = (global::Microsoft.PlayerFramework.IInteractiveViewModel)Value;
        }
        private object get_305_MediaPlayerToggleButton_StrokeThickness(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerToggleButton)instance;
            return that.StrokeThickness;
        }
        private void set_305_MediaPlayerToggleButton_StrokeThickness(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerToggleButton)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_306_MediaPlayerToggleButton_ContentTransform(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerToggleButton)instance;
            return that.ContentTransform;
        }
        private void set_306_MediaPlayerToggleButton_ContentTransform(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.MediaPlayerToggleButton)instance;
            that.ContentTransform = (global::Windows.UI.Xaml.Media.Transform)Value;
        }
        private object get_307_VolumeSlider_Orientation(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeSlider)instance;
            return that.Orientation;
        }
        private void set_307_VolumeSlider_Orientation(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeSlider)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_308_VolumeSlider_ViewModel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeSlider)instance;
            return that.ViewModel;
        }
        private void set_308_VolumeSlider_ViewModel(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeSlider)instance;
            that.ViewModel = (global::Microsoft.PlayerFramework.IInteractiveViewModel)Value;
        }
        private object get_309_VolumeSlider_InnerFocusState(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeSlider)instance;
            return that.InnerFocusState;
        }
        private object get_310_VolumeButton_PanelBackground(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeButton)instance;
            return that.PanelBackground;
        }
        private void set_310_VolumeButton_PanelBackground(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeButton)instance;
            that.PanelBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_311_VolumeButton_ViewModel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeButton)instance;
            return that.ViewModel;
        }
        private void set_311_VolumeButton_ViewModel(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeButton)instance;
            that.ViewModel = (global::Microsoft.PlayerFramework.IInteractiveViewModel)Value;
        }
        private object get_312_VolumeButton_PanelPosition(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeButton)instance;
            return that.PanelPosition;
        }
        private void set_312_VolumeButton_PanelPosition(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeButton)instance;
            that.PanelPosition = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_313_VolumeButton_IsVolumeVisible(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeButton)instance;
            return that.IsVolumeVisible;
        }
        private void set_313_VolumeButton_IsVolumeVisible(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeButton)instance;
            that.IsVolumeVisible = (global::System.Boolean)Value;
        }
        private object get_314_VolumeButton_MuteButtonStyle(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeButton)instance;
            return that.MuteButtonStyle;
        }
        private void set_314_VolumeButton_MuteButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.VolumeButton)instance;
            that.MuteButtonStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_315_ResolutionIndicator_MediaQuality(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ResolutionIndicator)instance;
            return that.MediaQuality;
        }
        private void set_315_ResolutionIndicator_MediaQuality(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ResolutionIndicator)instance;
            that.MediaQuality = (global::Microsoft.PlayerFramework.MediaQuality)Value;
        }
        private object get_316_DeselectableListBox_ItemsSource(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.DeselectableListBox)instance;
            return that.ItemsSource;
        }
        private void set_316_DeselectableListBox_ItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.DeselectableListBox)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_317_DeselectableListBox_SelectedItem(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.DeselectableListBox)instance;
            return that.SelectedItem;
        }
        private void set_317_DeselectableListBox_SelectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.DeselectableListBox)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_318_DeselectableListBox_ItemTemplate(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.DeselectableListBox)instance;
            return that.ItemTemplate;
        }
        private void set_318_DeselectableListBox_ItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.DeselectableListBox)instance;
            that.ItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_319_DeselectableListBox_SelectedIdentifierText(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.DeselectableListBox)instance;
            return that.SelectedIdentifierText;
        }
        private void set_319_DeselectableListBox_SelectedIdentifierText(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.DeselectableListBox)instance;
            that.SelectedIdentifierText = (global::System.String)Value;
        }
        private object get_320_DeselectableListBox_DeselectedItem(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.DeselectableListBox)instance;
            return that.DeselectedItem;
        }
        private void set_320_DeselectableListBox_DeselectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.DeselectableListBox)instance;
            that.DeselectedItem = (global::System.Object)Value;
        }
        private object get_321_ErrorView_ErrorText(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ErrorView)instance;
            return that.ErrorText;
        }
        private void set_321_ErrorView_ErrorText(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.ErrorView)instance;
            that.ErrorText = (global::System.String)Value;
        }
        private object get_322_BufferingView_ViewModel(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.BufferingView)instance;
            return that.ViewModel;
        }
        private void set_322_BufferingView_ViewModel(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.BufferingView)instance;
            that.ViewModel = (global::Microsoft.PlayerFramework.IInteractiveViewModel)Value;
        }
        private object get_323_PositionedItemsControl_ItemsSource(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsControl)instance;
            return that.ItemsSource;
        }
        private void set_323_PositionedItemsControl_ItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsControl)instance;
            that.ItemsSource = (global::System.Collections.IEnumerable)Value;
        }
        private object get_324_PositionedItemsPanel_Maximum(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsPanel)instance;
            return that.Maximum;
        }
        private void set_324_PositionedItemsPanel_Maximum(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsPanel)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_325_PositionedItemsPanel_Minimum(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsPanel)instance;
            return that.Minimum;
        }
        private void set_325_PositionedItemsPanel_Minimum(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsPanel)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_326_PositionedItemsControl_ItemTemplate(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsControl)instance;
            return that.ItemTemplate;
        }
        private void set_326_PositionedItemsControl_ItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsControl)instance;
            that.ItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_327_PositionedItemsPanel_MaxPosition(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsPanel)instance;
            return that.MaxPosition;
        }
        private void set_327_PositionedItemsPanel_MaxPosition(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsPanel)instance;
            that.MaxPosition = (global::System.Nullable<global::System.Double>)Value;
        }
        private object get_328_PositionedItemsPanel_MinPosition(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsPanel)instance;
            return that.MinPosition;
        }
        private void set_328_PositionedItemsPanel_MinPosition(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsPanel)instance;
            that.MinPosition = (global::System.Nullable<global::System.Double>)Value;
        }
        private object get_329_PositionedItemsPanel_DisplayAllItems(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsPanel)instance;
            return that.DisplayAllItems;
        }
        private void set_329_PositionedItemsPanel_DisplayAllItems(object instance, object Value)
        {
            var that = (global::Microsoft.PlayerFramework.PositionedItemsPanel)instance;
            that.DisplayAllItems = (global::System.Boolean)Value;
        }
        private object get_330_PositionedItemsPanel_Position(object instance)
        {
            return global::Microsoft.PlayerFramework.PositionedItemsPanel.GetPosition((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_330_PositionedItemsPanel_Position(object instance, object Value)
        {
            global::Microsoft.PlayerFramework.PositionedItemsPanel.SetPosition((global::Windows.UI.Xaml.DependencyObject)instance, (System.Double)Value);
                    }
        private object get_331_ParentAwareListBoxItem_ParentListBox(object instance)
        {
            var that = (global::Microsoft.PlayerFramework.ParentAwareListBoxItem)instance;
            return that.ParentListBox;
        }
        private object get_332_ChartAnnotationLabelDefinition_Format(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Format;
        }
        private void set_332_ChartAnnotationLabelDefinition_Format(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Format = (global::System.String)Value;
        }
        private object get_333_ChartAnnotationLabelDefinition_Template(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Template;
        }
        private void set_333_ChartAnnotationLabelDefinition_Template(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Template = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_334_ChartAnnotationLabelDefinition_DefaultVisualStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.DefaultVisualStyle;
        }
        private void set_334_ChartAnnotationLabelDefinition_DefaultVisualStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.DefaultVisualStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_335_ChartAnnotationLabelDefinition_Location(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Location;
        }
        private void set_335_ChartAnnotationLabelDefinition_Location(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Location = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation)Value;
        }
        private object get_336_ChartAnnotationLabelDefinition_HorizontalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.HorizontalAlignment;
        }
        private void set_336_ChartAnnotationLabelDefinition_HorizontalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.HorizontalAlignment = (global::Windows.UI.Xaml.HorizontalAlignment)Value;
        }
        private object get_337_ChartAnnotationLabelDefinition_VerticalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.VerticalAlignment;
        }
        private void set_337_ChartAnnotationLabelDefinition_VerticalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.VerticalAlignment = (global::Windows.UI.Xaml.VerticalAlignment)Value;
        }
        private object get_338_ChartAnnotationLabelDefinition_HorizontalOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.HorizontalOffset;
        }
        private void set_338_ChartAnnotationLabelDefinition_HorizontalOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.HorizontalOffset = (global::System.Double)Value;
        }
        private object get_339_ChartAnnotationLabelDefinition_VerticalOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.VerticalOffset;
        }
        private void set_339_ChartAnnotationLabelDefinition_VerticalOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.VerticalOffset = (global::System.Double)Value;
        }
        private object get_340_HighlightStyle_FontFamily(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontFamily;
        }
        private void set_340_HighlightStyle_FontFamily(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontFamily = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_341_HighlightStyle_FontWeight(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontWeight;
        }
        private void set_341_HighlightStyle_FontWeight(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontWeight = (global::Telerik.UI.Xaml.Controls.Input.FontWeightName)Value;
        }
        private object get_342_HighlightStyle_FontStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontStyle;
        }
        private void set_342_HighlightStyle_FontStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_343_HighlightStyle_Foreground(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.Foreground;
        }
        private void set_343_HighlightStyle_Foreground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_344_HighlightStyle_FontSize(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontSize;
        }
        private void set_344_HighlightStyle_FontSize(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontSize = (global::System.Double)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::IPlayer.IPlayer_XamlTypeInfo.XamlMember xamlMember = null;
            global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.PlayerFramework.MediaPlayer.AudioCategory":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AudioCategory", "Windows.UI.Xaml.Media.AudioCategory");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_MediaPlayer_AudioCategory;
                xamlMember.Setter = set_0_MediaPlayer_AudioCategory;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AutoHide":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AutoHide", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_MediaPlayer_AutoHide;
                xamlMember.Setter = set_1_MediaPlayer_AutoHide;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AutoHideBehavior":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AutoHideBehavior", "Microsoft.PlayerFramework.AutoHideBehavior");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_MediaPlayer_AutoHideBehavior;
                xamlMember.Setter = set_2_MediaPlayer_AutoHideBehavior;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsFastForwardVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsFastForwardVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_MediaPlayer_IsFastForwardVisible;
                xamlMember.Setter = set_3_MediaPlayer_IsFastForwardVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsRewindVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsRewindVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_MediaPlayer_IsRewindVisible;
                xamlMember.Setter = set_4_MediaPlayer_IsRewindVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipAheadVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipAheadVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_MediaPlayer_IsSkipAheadVisible;
                xamlMember.Setter = set_5_MediaPlayer_IsSkipAheadVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipBackVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipBackVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_MediaPlayer_IsSkipBackVisible;
                xamlMember.Setter = set_6_MediaPlayer_IsSkipBackVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.MediaQuality":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "MediaQuality", "Microsoft.PlayerFramework.MediaQuality");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_MediaPlayer_MediaQuality;
                xamlMember.Setter = set_7_MediaPlayer_MediaQuality;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AutoLoadPlugins":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AutoLoadPlugins", "Boolean");
                xamlMember.Getter = get_8_MediaPlayer_AutoLoadPlugins;
                xamlMember.Setter = set_8_MediaPlayer_AutoLoadPlugins;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Plugins":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Plugins", "System.Collections.ObjectModel.ObservableCollection<Microsoft.PlayerFramework.IPlugin>");
                xamlMember.Getter = get_9_MediaPlayer_Plugins;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.IPlugin.MediaPlayer":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.IPlugin");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "MediaPlayer", "Microsoft.PlayerFramework.MediaPlayer");
                xamlMember.Getter = get_10_IPlugin_MediaPlayer;
                xamlMember.Setter = set_10_IPlugin_MediaPlayer;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsCaptionSelectionEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsCaptionSelectionEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_MediaPlayer_IsCaptionSelectionEnabled;
                xamlMember.Setter = set_11_MediaPlayer_IsCaptionSelectionEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsCaptionSelectionAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsCaptionSelectionAllowed", "Boolean");
                xamlMember.Getter = get_12_MediaPlayer_IsCaptionSelectionAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsGoLiveEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsGoLiveEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_MediaPlayer_IsGoLiveEnabled;
                xamlMember.Setter = set_13_MediaPlayer_IsGoLiveEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsGoLiveAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsGoLiveAllowed", "Boolean");
                xamlMember.Getter = get_14_MediaPlayer_IsGoLiveAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsPlayResumeEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsPlayResumeEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_MediaPlayer_IsPlayResumeEnabled;
                xamlMember.Setter = set_15_MediaPlayer_IsPlayResumeEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsPlayResumeAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsPlayResumeAllowed", "Boolean");
                xamlMember.Getter = get_16_MediaPlayer_IsPlayResumeAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsPauseEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsPauseEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_MediaPlayer_IsPauseEnabled;
                xamlMember.Setter = set_17_MediaPlayer_IsPauseEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsPauseAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsPauseAllowed", "Boolean");
                xamlMember.Getter = get_18_MediaPlayer_IsPauseAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsStopEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsStopEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_MediaPlayer_IsStopEnabled;
                xamlMember.Setter = set_19_MediaPlayer_IsStopEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsStopAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsStopAllowed", "Boolean");
                xamlMember.Getter = get_20_MediaPlayer_IsStopAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsReplayEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsReplayEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_MediaPlayer_IsReplayEnabled;
                xamlMember.Setter = set_21_MediaPlayer_IsReplayEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsReplayAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsReplayAllowed", "Boolean");
                xamlMember.Getter = get_22_MediaPlayer_IsReplayAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsAudioSelectionEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsAudioSelectionEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_MediaPlayer_IsAudioSelectionEnabled;
                xamlMember.Setter = set_23_MediaPlayer_IsAudioSelectionEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsAudioSelectionAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsAudioSelectionAllowed", "Boolean");
                xamlMember.Getter = get_24_MediaPlayer_IsAudioSelectionAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsRewindEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsRewindEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_MediaPlayer_IsRewindEnabled;
                xamlMember.Setter = set_25_MediaPlayer_IsRewindEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsRewindAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsRewindAllowed", "Boolean");
                xamlMember.Getter = get_26_MediaPlayer_IsRewindAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsFastForwardEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsFastForwardEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_MediaPlayer_IsFastForwardEnabled;
                xamlMember.Setter = set_27_MediaPlayer_IsFastForwardEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsFastForwardAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsFastForwardAllowed", "Boolean");
                xamlMember.Getter = get_28_MediaPlayer_IsFastForwardAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSlowMotionEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSlowMotionEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_MediaPlayer_IsSlowMotionEnabled;
                xamlMember.Setter = set_29_MediaPlayer_IsSlowMotionEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSlowMotionAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSlowMotionAllowed", "Boolean");
                xamlMember.Getter = get_30_MediaPlayer_IsSlowMotionAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSeekEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSeekEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_MediaPlayer_IsSeekEnabled;
                xamlMember.Setter = set_31_MediaPlayer_IsSeekEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSeekAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSeekAllowed", "Boolean");
                xamlMember.Getter = get_32_MediaPlayer_IsSeekAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipPreviousEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipPreviousEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_MediaPlayer_IsSkipPreviousEnabled;
                xamlMember.Setter = set_33_MediaPlayer_IsSkipPreviousEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipPreviousAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipPreviousAllowed", "Boolean");
                xamlMember.Getter = get_34_MediaPlayer_IsSkipPreviousAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipNextEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipNextEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_MediaPlayer_IsSkipNextEnabled;
                xamlMember.Setter = set_35_MediaPlayer_IsSkipNextEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipNextAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipNextAllowed", "Boolean");
                xamlMember.Getter = get_36_MediaPlayer_IsSkipNextAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipBackEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipBackEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_MediaPlayer_IsSkipBackEnabled;
                xamlMember.Setter = set_37_MediaPlayer_IsSkipBackEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipBackAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipBackAllowed", "Boolean");
                xamlMember.Getter = get_38_MediaPlayer_IsSkipBackAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipAheadEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipAheadEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_MediaPlayer_IsSkipAheadEnabled;
                xamlMember.Setter = set_39_MediaPlayer_IsSkipAheadEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipAheadAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipAheadAllowed", "Boolean");
                xamlMember.Getter = get_40_MediaPlayer_IsSkipAheadAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsScrubbingEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsScrubbingEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_MediaPlayer_IsScrubbingEnabled;
                xamlMember.Setter = set_41_MediaPlayer_IsScrubbingEnabled;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsScrubbingAllowed":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsScrubbingAllowed", "Boolean");
                xamlMember.Getter = get_42_MediaPlayer_IsScrubbingAllowed;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsAudioSelectionVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsAudioSelectionVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_MediaPlayer_IsAudioSelectionVisible;
                xamlMember.Setter = set_43_MediaPlayer_IsAudioSelectionVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsCaptionSelectionVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsCaptionSelectionVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_MediaPlayer_IsCaptionSelectionVisible;
                xamlMember.Setter = set_44_MediaPlayer_IsCaptionSelectionVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsDurationVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsDurationVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_MediaPlayer_IsDurationVisible;
                xamlMember.Setter = set_45_MediaPlayer_IsDurationVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsTimeRemainingVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsTimeRemainingVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_MediaPlayer_IsTimeRemainingVisible;
                xamlMember.Setter = set_46_MediaPlayer_IsTimeRemainingVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsFullScreenVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsFullScreenVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_MediaPlayer_IsFullScreenVisible;
                xamlMember.Setter = set_47_MediaPlayer_IsFullScreenVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsGoLiveVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsGoLiveVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_MediaPlayer_IsGoLiveVisible;
                xamlMember.Setter = set_48_MediaPlayer_IsGoLiveVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsPlayPauseVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsPlayPauseVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_MediaPlayer_IsPlayPauseVisible;
                xamlMember.Setter = set_49_MediaPlayer_IsPlayPauseVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsTimeElapsedVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsTimeElapsedVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_MediaPlayer_IsTimeElapsedVisible;
                xamlMember.Setter = set_50_MediaPlayer_IsTimeElapsedVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsReplayVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsReplayVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_MediaPlayer_IsReplayVisible;
                xamlMember.Setter = set_51_MediaPlayer_IsReplayVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipPreviousVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipPreviousVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_MediaPlayer_IsSkipPreviousVisible;
                xamlMember.Setter = set_52_MediaPlayer_IsSkipPreviousVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSkipNextVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipNextVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_MediaPlayer_IsSkipNextVisible;
                xamlMember.Setter = set_53_MediaPlayer_IsSkipNextVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSlowMotionVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSlowMotionVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_MediaPlayer_IsSlowMotionVisible;
                xamlMember.Setter = set_54_MediaPlayer_IsSlowMotionVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsStopVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsStopVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_MediaPlayer_IsStopVisible;
                xamlMember.Setter = set_55_MediaPlayer_IsStopVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsTimelineVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsTimelineVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_MediaPlayer_IsTimelineVisible;
                xamlMember.Setter = set_56_MediaPlayer_IsTimelineVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsVolumeVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsVolumeVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_MediaPlayer_IsVolumeVisible;
                xamlMember.Setter = set_57_MediaPlayer_IsVolumeVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSignalStrengthVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSignalStrengthVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_MediaPlayer_IsSignalStrengthVisible;
                xamlMember.Setter = set_58_MediaPlayer_IsSignalStrengthVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsResolutionIndicatorVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsResolutionIndicatorVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_MediaPlayer_IsResolutionIndicatorVisible;
                xamlMember.Setter = set_59_MediaPlayer_IsResolutionIndicatorVisible;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.TimeFormatConverter":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "TimeFormatConverter", "Windows.UI.Xaml.Data.IValueConverter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_MediaPlayer_TimeFormatConverter;
                xamlMember.Setter = set_60_MediaPlayer_TimeFormatConverter;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SkipBackInterval":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SkipBackInterval", "System.Nullable<TimeSpan>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_MediaPlayer_SkipBackInterval;
                xamlMember.Setter = set_61_MediaPlayer_SkipBackInterval;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SkipAheadInterval":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SkipAheadInterval", "System.Nullable<TimeSpan>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_MediaPlayer_SkipAheadInterval;
                xamlMember.Setter = set_62_MediaPlayer_SkipAheadInterval;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.VisualMarkers":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "VisualMarkers", "System.Collections.ObjectModel.ObservableCollection<Microsoft.PlayerFramework.VisualMarker>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_MediaPlayer_VisualMarkers;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.VisualMarker.Text":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VisualMarker");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_VisualMarker_Text;
                xamlMember.Setter = set_64_VisualMarker_Text;
                break;
            case "Microsoft.PlayerFramework.VisualMarker.Time":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VisualMarker");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Time", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_VisualMarker_Time;
                xamlMember.Setter = set_65_VisualMarker_Time;
                break;
            case "Microsoft.PlayerFramework.VisualMarker.IsSeekable":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VisualMarker");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSeekable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_VisualMarker_IsSeekable;
                xamlMember.Setter = set_66_VisualMarker_IsSeekable;
                break;
            case "Microsoft.PlayerFramework.VisualMarker.Style":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VisualMarker");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Style", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_VisualMarker_Style;
                xamlMember.Setter = set_67_VisualMarker_Style;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Markers":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Markers", "Windows.UI.Xaml.Media.TimelineMarkerCollection");
                xamlMember.Getter = get_68_MediaPlayer_Markers;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AutoLoad":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AutoLoad", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_MediaPlayer_AutoLoad;
                xamlMember.Setter = set_69_MediaPlayer_AutoLoad;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SignalStrength":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SignalStrength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_MediaPlayer_SignalStrength;
                xamlMember.Setter = set_70_MediaPlayer_SignalStrength;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.LivePositionBuffer":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "LivePositionBuffer", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_MediaPlayer_LivePositionBuffer;
                xamlMember.Setter = set_71_MediaPlayer_LivePositionBuffer;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsPositionLive":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsPositionLive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_MediaPlayer_IsPositionLive;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.LivePosition":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "LivePosition", "System.Nullable<TimeSpan>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_MediaPlayer_LivePosition;
                xamlMember.Setter = set_73_MediaPlayer_LivePosition;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Duration":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Duration", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_MediaPlayer_Duration;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsStartTimeOffset":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsStartTimeOffset", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_MediaPlayer_IsStartTimeOffset;
                xamlMember.Setter = set_75_MediaPlayer_IsStartTimeOffset;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.StartTime":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "StartTime", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_MediaPlayer_StartTime;
                xamlMember.Setter = set_76_MediaPlayer_StartTime;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.EndTime":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "EndTime", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_MediaPlayer_EndTime;
                xamlMember.Setter = set_77_MediaPlayer_EndTime;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.TimeRemaining":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "TimeRemaining", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_MediaPlayer_TimeRemaining;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SeekWhileScrubbing":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SeekWhileScrubbing", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_MediaPlayer_SeekWhileScrubbing;
                xamlMember.Setter = set_79_MediaPlayer_SeekWhileScrubbing;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.ReplayOffset":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ReplayOffset", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_MediaPlayer_ReplayOffset;
                xamlMember.Setter = set_80_MediaPlayer_ReplayOffset;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SlowMotionPlaybackRate":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SlowMotionPlaybackRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_MediaPlayer_SlowMotionPlaybackRate;
                xamlMember.Setter = set_81_MediaPlayer_SlowMotionPlaybackRate;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsSlowMotion":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSlowMotion", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_MediaPlayer_IsSlowMotion;
                xamlMember.Setter = set_82_MediaPlayer_IsSlowMotion;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsCaptionsActive":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsCaptionsActive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_MediaPlayer_IsCaptionsActive;
                xamlMember.Setter = set_83_MediaPlayer_IsCaptionsActive;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsFullScreen":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsFullScreen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_MediaPlayer_IsFullScreen;
                xamlMember.Setter = set_84_MediaPlayer_IsFullScreen;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AdvertisingState":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AdvertisingState", "Microsoft.PlayerFramework.AdvertisingState");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_MediaPlayer_AdvertisingState;
                xamlMember.Setter = set_85_MediaPlayer_AdvertisingState;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsScrubbing":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsScrubbing", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_MediaPlayer_IsScrubbing;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.StartupPosition":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "StartupPosition", "System.Nullable<TimeSpan>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_MediaPlayer_StartupPosition;
                xamlMember.Setter = set_87_MediaPlayer_StartupPosition;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.MediaEndedBehavior":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "MediaEndedBehavior", "Microsoft.PlayerFramework.MediaEndedBehavior");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_MediaPlayer_MediaEndedBehavior;
                xamlMember.Setter = set_88_MediaPlayer_MediaEndedBehavior;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.UpdateInterval":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "UpdateInterval", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_MediaPlayer_UpdateInterval;
                xamlMember.Setter = set_89_MediaPlayer_UpdateInterval;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AvailableCaptions":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AvailableCaptions", "System.Collections.Generic.List<Microsoft.PlayerFramework.Caption>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_MediaPlayer_AvailableCaptions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.Caption.Id":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.Caption");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Id", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_Caption_Id;
                xamlMember.Setter = set_91_Caption_Id;
                break;
            case "Microsoft.PlayerFramework.Caption.Description":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.Caption");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Description", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_Caption_Description;
                xamlMember.Setter = set_92_Caption_Description;
                break;
            case "Microsoft.PlayerFramework.Caption.Payload":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.Caption");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Payload", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_Caption_Payload;
                xamlMember.Setter = set_93_Caption_Payload;
                break;
            case "Microsoft.PlayerFramework.Caption.Source":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.Caption");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.Getter = get_94_Caption_Source;
                xamlMember.Setter = set_94_Caption_Source;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SelectedCaption":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SelectedCaption", "Microsoft.PlayerFramework.Caption");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_MediaPlayer_SelectedCaption;
                xamlMember.Setter = set_95_MediaPlayer_SelectedCaption;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AvailableAudioStreams":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AvailableAudioStreams", "System.Collections.Generic.List<Microsoft.PlayerFramework.AudioStream>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_MediaPlayer_AvailableAudioStreams;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.AudioStream.Name":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.AudioStream");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_97_AudioStream_Name;
                xamlMember.Setter = set_97_AudioStream_Name;
                break;
            case "Microsoft.PlayerFramework.AudioStream.Language":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.AudioStream");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Language", "String");
                xamlMember.Getter = get_98_AudioStream_Language;
                xamlMember.Setter = set_98_AudioStream_Language;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SelectedAudioStream":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SelectedAudioStream", "Microsoft.PlayerFramework.AudioStream");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_MediaPlayer_SelectedAudioStream;
                xamlMember.Setter = set_99_MediaPlayer_SelectedAudioStream;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsLive":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsLive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_MediaPlayer_IsLive;
                xamlMember.Setter = set_100_MediaPlayer_IsLive;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.TestForMediaPack":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "TestForMediaPack", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_MediaPlayer_TestForMediaPack;
                xamlMember.Setter = set_101_MediaPlayer_TestForMediaPack;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.MediaExtensionManager":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "MediaExtensionManager", "Windows.Media.MediaExtensionManager");
                xamlMember.Getter = get_102_MediaPlayer_MediaExtensionManager;
                xamlMember.Setter = set_102_MediaPlayer_MediaExtensionManager;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AspectRatioWidth":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AspectRatioWidth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_MediaPlayer_AspectRatioWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AspectRatioHeight":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AspectRatioHeight", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_MediaPlayer_AspectRatioHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AudioDeviceType":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AudioDeviceType", "Windows.UI.Xaml.Media.AudioDeviceType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_MediaPlayer_AudioDeviceType;
                xamlMember.Setter = set_105_MediaPlayer_AudioDeviceType;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.PlayToSource":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "PlayToSource", "Windows.Media.PlayTo.PlayToSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_MediaPlayer_PlayToSource;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.DefaultPlaybackRate":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "DefaultPlaybackRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_MediaPlayer_DefaultPlaybackRate;
                xamlMember.Setter = set_107_MediaPlayer_DefaultPlaybackRate;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsAudioOnly":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsAudioOnly", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_MediaPlayer_IsAudioOnly;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsLooping":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsLooping", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_MediaPlayer_IsLooping;
                xamlMember.Setter = set_109_MediaPlayer_IsLooping;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.PosterSource":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "PosterSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_MediaPlayer_PosterSource;
                xamlMember.Setter = set_110_MediaPlayer_PosterSource;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.ActualStereo3DVideoPackingMode":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ActualStereo3DVideoPackingMode", "Windows.UI.Xaml.Media.Stereo3DVideoPackingMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_MediaPlayer_ActualStereo3DVideoPackingMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Stereo3DVideoPackingMode":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Stereo3DVideoPackingMode", "Windows.UI.Xaml.Media.Stereo3DVideoPackingMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_MediaPlayer_Stereo3DVideoPackingMode;
                xamlMember.Setter = set_112_MediaPlayer_Stereo3DVideoPackingMode;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Stereo3DVideoRenderMode":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Stereo3DVideoRenderMode", "Windows.UI.Xaml.Media.Stereo3DVideoRenderMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_MediaPlayer_Stereo3DVideoRenderMode;
                xamlMember.Setter = set_113_MediaPlayer_Stereo3DVideoRenderMode;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsStereo3DVideo":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsStereo3DVideo", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_MediaPlayer_IsStereo3DVideo;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.RealTimePlayback":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "RealTimePlayback", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_115_MediaPlayer_RealTimePlayback;
                xamlMember.Setter = set_115_MediaPlayer_RealTimePlayback;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.ProtectionManager":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ProtectionManager", "Windows.Media.Protection.MediaProtectionManager");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_MediaPlayer_ProtectionManager;
                xamlMember.Setter = set_116_MediaPlayer_ProtectionManager;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AudioStreamCount":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AudioStreamCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_MediaPlayer_AudioStreamCount;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AudioStreamIndex":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AudioStreamIndex", "System.Nullable<Int32>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_MediaPlayer_AudioStreamIndex;
                xamlMember.Setter = set_118_MediaPlayer_AudioStreamIndex;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AutoPlay":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AutoPlay", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_MediaPlayer_AutoPlay;
                xamlMember.Setter = set_119_MediaPlayer_AutoPlay;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.BufferingProgress":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "BufferingProgress", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_MediaPlayer_BufferingProgress;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.CanPause":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "CanPause", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_MediaPlayer_CanPause;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.CanSeek":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "CanSeek", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_MediaPlayer_CanSeek;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Balance":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Balance", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_MediaPlayer_Balance;
                xamlMember.Setter = set_123_MediaPlayer_Balance;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.DownloadProgress":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "DownloadProgress", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_MediaPlayer_DownloadProgress;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.DownloadProgressOffset":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "DownloadProgressOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_MediaPlayer_DownloadProgressOffset;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsMuted":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsMuted", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_MediaPlayer_IsMuted;
                xamlMember.Setter = set_126_MediaPlayer_IsMuted;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.NaturalDuration":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "NaturalDuration", "Windows.UI.Xaml.Duration");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_127_MediaPlayer_NaturalDuration;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.NaturalVideoHeight":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "NaturalVideoHeight", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_MediaPlayer_NaturalVideoHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.NaturalVideoWidth":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "NaturalVideoWidth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_MediaPlayer_NaturalVideoWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.PlaybackRate":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "PlaybackRate", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_MediaPlayer_PlaybackRate;
                xamlMember.Setter = set_130_MediaPlayer_PlaybackRate;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Position":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Position", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_131_MediaPlayer_Position;
                xamlMember.Setter = set_131_MediaPlayer_Position;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.CurrentState":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "CurrentState", "Windows.UI.Xaml.Media.MediaElementState");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_132_MediaPlayer_CurrentState;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Source":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_MediaPlayer_Source;
                xamlMember.Setter = set_133_MediaPlayer_Source;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Volume":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Volume", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_MediaPlayer_Volume;
                xamlMember.Setter = set_134_MediaPlayer_Volume;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.SupportedPlaybackRates":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SupportedPlaybackRates", "System.Collections.Generic.IList<Double>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_MediaPlayer_SupportedPlaybackRates;
                xamlMember.Setter = set_135_MediaPlayer_SupportedPlaybackRates;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AllowMediaStartingDeferrals":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AllowMediaStartingDeferrals", "Boolean");
                xamlMember.Getter = get_136_MediaPlayer_AllowMediaStartingDeferrals;
                xamlMember.Setter = set_136_MediaPlayer_AllowMediaStartingDeferrals;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.ControlPanel":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ControlPanel", "Windows.UI.Xaml.Controls.Control");
                xamlMember.Getter = get_137_MediaPlayer_ControlPanel;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.AutoHideInterval":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AutoHideInterval", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_138_MediaPlayer_AutoHideInterval;
                xamlMember.Setter = set_138_MediaPlayer_AutoHideInterval;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.Containers":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Containers", "System.Collections.Generic.IList<Windows.UI.Xaml.UIElement>");
                xamlMember.Getter = get_139_MediaPlayer_Containers;
                xamlMember.Setter = set_139_MediaPlayer_Containers;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.InteractiveViewModel":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "InteractiveViewModel", "Microsoft.PlayerFramework.IInteractiveViewModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_140_MediaPlayer_InteractiveViewModel;
                xamlMember.Setter = set_140_MediaPlayer_InteractiveViewModel;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.DefaultInteractiveViewModel":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "DefaultInteractiveViewModel", "Microsoft.PlayerFramework.IInteractiveViewModel");
                xamlMember.Getter = get_141_MediaPlayer_DefaultInteractiveViewModel;
                xamlMember.Setter = set_141_MediaPlayer_DefaultInteractiveViewModel;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.InteractiveActivationMode":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "InteractiveActivationMode", "Microsoft.PlayerFramework.InteractionType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_142_MediaPlayer_InteractiveActivationMode;
                xamlMember.Setter = set_142_MediaPlayer_InteractiveActivationMode;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.InteractiveDeactivationMode":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "InteractiveDeactivationMode", "Microsoft.PlayerFramework.InteractionType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_143_MediaPlayer_InteractiveDeactivationMode;
                xamlMember.Setter = set_143_MediaPlayer_InteractiveDeactivationMode;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.IsInteractive":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsInteractive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_144_MediaPlayer_IsInteractive;
                xamlMember.Setter = set_144_MediaPlayer_IsInteractive;
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.PlayerState":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "PlayerState", "Microsoft.PlayerFramework.PlayerState");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_145_MediaPlayer_PlayerState;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.MediaPlayer.ResourceString":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayer");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ResourceString", "String");
                xamlMember.SetTargetTypeName("String");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_146_MediaPlayer_ResourceString;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.RingSlice.EndAngle":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.RingSlice");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "EndAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_147_RingSlice_EndAngle;
                xamlMember.Setter = set_147_RingSlice_EndAngle;
                break;
            case "WinRTXamlToolkit.Controls.RingSlice.InnerRadius":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.RingSlice");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "InnerRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_148_RingSlice_InnerRadius;
                xamlMember.Setter = set_148_RingSlice_InnerRadius;
                break;
            case "WinRTXamlToolkit.Controls.RingSlice.Radius":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.RingSlice");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Radius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_149_RingSlice_Radius;
                xamlMember.Setter = set_149_RingSlice_Radius;
                break;
            case "WinRTXamlToolkit.Controls.RingSlice.StartAngle":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.RingSlice");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_150_RingSlice_StartAngle;
                xamlMember.Setter = set_150_RingSlice_StartAngle;
                break;
            case "WinRTXamlToolkit.Controls.RingSlice.Center":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.RingSlice");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Center", "System.Nullable<Windows.Foundation.Point>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_151_RingSlice_Center;
                xamlMember.Setter = set_151_RingSlice_Center;
                break;
            case "WinRTXamlToolkit.Controls.CustomAppBar.IsOpen":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomAppBar");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_152_CustomAppBar_IsOpen;
                xamlMember.Setter = set_152_CustomAppBar_IsOpen;
                break;
            case "WinRTXamlToolkit.Controls.CustomAppBar.CanOpen":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomAppBar");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "CanOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_153_CustomAppBar_CanOpen;
                xamlMember.Setter = set_153_CustomAppBar_CanOpen;
                break;
            case "WinRTXamlToolkit.Controls.CustomAppBar.CanDismiss":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomAppBar");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "CanDismiss", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_154_CustomAppBar_CanDismiss;
                xamlMember.Setter = set_154_CustomAppBar_CanDismiss;
                break;
            case "WinRTXamlToolkit.Controls.CustomAppBar.CanOpenInSnappedView":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomAppBar");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "CanOpenInSnappedView", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_155_CustomAppBar_CanOpenInSnappedView;
                xamlMember.Setter = set_155_CustomAppBar_CanOpenInSnappedView;
                break;
            case "WinRTXamlToolkit.Controls.CustomAppBar.IsLightDismissEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomAppBar");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsLightDismissEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_156_CustomAppBar_IsLightDismissEnabled;
                xamlMember.Setter = set_156_CustomAppBar_IsLightDismissEnabled;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.ClipToBounds":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ClipToBounds", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_157_FrameworkElementExtensions_ClipToBounds;
                xamlMember.Setter = set_157_FrameworkElementExtensions_ClipToBounds;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.ClipToBoundsHandler":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ClipToBoundsHandler", "WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_158_FrameworkElementExtensions_ClipToBoundsHandler;
                xamlMember.Setter = set_158_FrameworkElementExtensions_ClipToBoundsHandler;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.Cursor":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Cursor", "Windows.UI.Core.CoreCursor");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_159_FrameworkElementExtensions_Cursor;
                xamlMember.Setter = set_159_FrameworkElementExtensions_Cursor;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SystemCursor":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SystemCursor", "Windows.UI.Core.CoreCursorType");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_160_FrameworkElementExtensions_SystemCursor;
                xamlMember.Setter = set_160_FrameworkElementExtensions_SystemCursor;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.CursorDisplayHandler":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "CursorDisplayHandler", "WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_161_FrameworkElementExtensions_CursorDisplayHandler;
                xamlMember.Setter = set_161_FrameworkElementExtensions_CursorDisplayHandler;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.DropDownPlacement":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "DropDownPlacement", "Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_162_RadAutoCompleteBox_DropDownPlacement;
                xamlMember.Setter = set_162_RadAutoCompleteBox_DropDownPlacement;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.FilterMode":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "FilterMode", "Telerik.UI.Xaml.Controls.Input.AutoCompleteBoxFilterMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_163_RadAutoCompleteBox_FilterMode;
                xamlMember.Setter = set_163_RadAutoCompleteBox_FilterMode;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.IsDropDownOpen":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsDropDownOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_164_RadAutoCompleteBox_IsDropDownOpen;
                xamlMember.Setter = set_164_RadAutoCompleteBox_IsDropDownOpen;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.Text":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_165_RadAutoCompleteBox_Text;
                xamlMember.Setter = set_165_RadAutoCompleteBox_Text;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.FilterComparisonMode":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "FilterComparisonMode", "System.StringComparison");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_166_RadAutoCompleteBox_FilterComparisonMode;
                xamlMember.Setter = set_166_RadAutoCompleteBox_FilterComparisonMode;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.FilterMemberPath":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "FilterMemberPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_167_RadAutoCompleteBox_FilterMemberPath;
                xamlMember.Setter = set_167_RadAutoCompleteBox_FilterMemberPath;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.DisplayMemberPath":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "DisplayMemberPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_168_RadAutoCompleteBox_DisplayMemberPath;
                xamlMember.Setter = set_168_RadAutoCompleteBox_DisplayMemberPath;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.FilterStartThreshold":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "FilterStartThreshold", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_169_RadAutoCompleteBox_FilterStartThreshold;
                xamlMember.Setter = set_169_RadAutoCompleteBox_FilterStartThreshold;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.FilterDelay":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "FilterDelay", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_170_RadAutoCompleteBox_FilterDelay;
                xamlMember.Setter = set_170_RadAutoCompleteBox_FilterDelay;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.FilterMemberProvider":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "FilterMemberProvider", "System.Func<Object, String>");
                xamlMember.Getter = get_171_RadAutoCompleteBox_FilterMemberProvider;
                xamlMember.Setter = set_171_RadAutoCompleteBox_FilterMemberProvider;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.FilteredItems":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "FilteredItems", "System.Collections.IEnumerable");
                xamlMember.Getter = get_172_RadAutoCompleteBox_FilteredItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.ItemsSource":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_173_RadAutoCompleteBox_ItemsSource;
                xamlMember.Setter = set_173_RadAutoCompleteBox_ItemsSource;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.ItemTemplate":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_174_RadAutoCompleteBox_ItemTemplate;
                xamlMember.Setter = set_174_RadAutoCompleteBox_ItemTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.AutosuggestFirstItem":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AutosuggestFirstItem", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_175_RadAutoCompleteBox_AutosuggestFirstItem;
                xamlMember.Setter = set_175_RadAutoCompleteBox_AutosuggestFirstItem;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.DropDownMaxHeight":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "DropDownMaxHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_176_RadAutoCompleteBox_DropDownMaxHeight;
                xamlMember.Setter = set_176_RadAutoCompleteBox_DropDownMaxHeight;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.WatermarkContent":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "WatermarkContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_177_RadAutoCompleteBox_WatermarkContent;
                xamlMember.Setter = set_177_RadAutoCompleteBox_WatermarkContent;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.WatermarkTemplate":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "WatermarkTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_178_RadAutoCompleteBox_WatermarkTemplate;
                xamlMember.Setter = set_178_RadAutoCompleteBox_WatermarkTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.SelectedItem":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_179_RadAutoCompleteBox_SelectedItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.RadHeaderedControl.Header":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_180_RadHeaderedControl_Header;
                xamlMember.Setter = set_180_RadHeaderedControl_Header;
                break;
            case "Telerik.UI.Xaml.Controls.RadHeaderedControl.HeaderTemplate":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_181_RadHeaderedControl_HeaderTemplate;
                xamlMember.Setter = set_181_RadHeaderedControl_HeaderTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.RadHeaderedControl.HeaderStyle":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "HeaderStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_182_RadHeaderedControl_HeaderStyle;
                xamlMember.Setter = set_182_RadHeaderedControl_HeaderStyle;
                break;
            case "Telerik.UI.Xaml.Controls.RadControl.CurrentVisualState":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "CurrentVisualState", "String");
                xamlMember.Getter = get_183_RadControl_CurrentVisualState;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.IsTextMatchHighlightEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsTextMatchHighlightEnabled", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_184_RadAutoCompleteBox_IsTextMatchHighlightEnabled;
                xamlMember.Setter = set_184_RadAutoCompleteBox_IsTextMatchHighlightEnabled;
                break;
            case "Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox.TextMatchHighlightStyle":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.RadAutoCompleteBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "TextMatchHighlightStyle", "Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_185_RadAutoCompleteBox_TextMatchHighlightStyle;
                xamlMember.Setter = set_185_RadAutoCompleteBox_TextMatchHighlightStyle;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.AdUnitId":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AdUnitId", "String");
                xamlMember.Getter = get_186_AdControl_AdUnitId;
                xamlMember.Setter = set_186_AdControl_AdUnitId;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.ApplicationId":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ApplicationId", "String");
                xamlMember.Getter = get_187_AdControl_ApplicationId;
                xamlMember.Setter = set_187_AdControl_ApplicationId;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.Latitude":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Latitude", "Double");
                xamlMember.Getter = get_188_AdControl_Latitude;
                xamlMember.Setter = set_188_AdControl_Latitude;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.Longitude":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Longitude", "Double");
                xamlMember.Getter = get_189_AdControl_Longitude;
                xamlMember.Setter = set_189_AdControl_Longitude;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.IsEngaged":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsEngaged", "Boolean");
                xamlMember.Getter = get_190_AdControl_IsEngaged;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.IsAutoRefreshEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsAutoRefreshEnabled", "Boolean");
                xamlMember.Getter = get_191_AdControl_IsAutoRefreshEnabled;
                xamlMember.Setter = set_191_AdControl_IsAutoRefreshEnabled;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.IsPerformanceScrollingEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsPerformanceScrollingEnabled", "Boolean");
                xamlMember.Getter = get_192_AdControl_IsPerformanceScrollingEnabled;
                xamlMember.Setter = set_192_AdControl_IsPerformanceScrollingEnabled;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.UseStaticAnchor":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "UseStaticAnchor", "Boolean");
                xamlMember.Getter = get_193_AdControl_UseStaticAnchor;
                xamlMember.Setter = set_193_AdControl_UseStaticAnchor;
                break;
            case "Microsoft.Advertising.WinRT.UI.AdControl.IsSuspended":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Advertising.WinRT.UI.AdControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSuspended", "Boolean");
                xamlMember.Getter = get_194_AdControl_IsSuspended;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.ControlPanel.ViewModel":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ViewModel", "Microsoft.PlayerFramework.IInteractiveViewModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_195_ControlPanel_ViewModel;
                xamlMember.Setter = set_195_ControlPanel_ViewModel;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.GoLiveButtonVisibility":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "GoLiveButtonVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_196_ControlPanel_GoLiveButtonVisibility;
                xamlMember.Setter = set_196_ControlPanel_GoLiveButtonVisibility;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsGoLiveButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsGoLiveButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_197_ControlPanel_IsGoLiveButtonVisible;
                xamlMember.Setter = set_197_ControlPanel_IsGoLiveButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsAudioSelectionButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsAudioSelectionButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_198_ControlPanel_IsAudioSelectionButtonVisible;
                xamlMember.Setter = set_198_ControlPanel_IsAudioSelectionButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsCaptionSelectionButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsCaptionSelectionButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_199_ControlPanel_IsCaptionSelectionButtonVisible;
                xamlMember.Setter = set_199_ControlPanel_IsCaptionSelectionButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsTimeElapsedButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsTimeElapsedButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_200_ControlPanel_IsTimeElapsedButtonVisible;
                xamlMember.Setter = set_200_ControlPanel_IsTimeElapsedButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsDurationButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsDurationButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_201_ControlPanel_IsDurationButtonVisible;
                xamlMember.Setter = set_201_ControlPanel_IsDurationButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsTimeRemainingButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsTimeRemainingButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_202_ControlPanel_IsTimeRemainingButtonVisible;
                xamlMember.Setter = set_202_ControlPanel_IsTimeRemainingButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsSkipNextButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipNextButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_203_ControlPanel_IsSkipNextButtonVisible;
                xamlMember.Setter = set_203_ControlPanel_IsSkipNextButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsSkipPreviousButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipPreviousButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_204_ControlPanel_IsSkipPreviousButtonVisible;
                xamlMember.Setter = set_204_ControlPanel_IsSkipPreviousButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsSkipAheadButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipAheadButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_205_ControlPanel_IsSkipAheadButtonVisible;
                xamlMember.Setter = set_205_ControlPanel_IsSkipAheadButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsSkipBackButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipBackButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_206_ControlPanel_IsSkipBackButtonVisible;
                xamlMember.Setter = set_206_ControlPanel_IsSkipBackButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsFastForwardButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsFastForwardButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_207_ControlPanel_IsFastForwardButtonVisible;
                xamlMember.Setter = set_207_ControlPanel_IsFastForwardButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsStopButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsStopButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_208_ControlPanel_IsStopButtonVisible;
                xamlMember.Setter = set_208_ControlPanel_IsStopButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsRewindButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsRewindButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_209_ControlPanel_IsRewindButtonVisible;
                xamlMember.Setter = set_209_ControlPanel_IsRewindButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsReplayButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsReplayButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_210_ControlPanel_IsReplayButtonVisible;
                xamlMember.Setter = set_210_ControlPanel_IsReplayButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsResolutionIndicatorVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsResolutionIndicatorVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_211_ControlPanel_IsResolutionIndicatorVisible;
                xamlMember.Setter = set_211_ControlPanel_IsResolutionIndicatorVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsSignalStrengthVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSignalStrengthVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_212_ControlPanel_IsSignalStrengthVisible;
                xamlMember.Setter = set_212_ControlPanel_IsSignalStrengthVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsFullScreenButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsFullScreenButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_213_ControlPanel_IsFullScreenButtonVisible;
                xamlMember.Setter = set_213_ControlPanel_IsFullScreenButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsMuteButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsMuteButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_214_ControlPanel_IsMuteButtonVisible;
                xamlMember.Setter = set_214_ControlPanel_IsMuteButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsSlowMotionButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSlowMotionButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_215_ControlPanel_IsSlowMotionButtonVisible;
                xamlMember.Setter = set_215_ControlPanel_IsSlowMotionButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsPlayPauseButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsPlayPauseButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_216_ControlPanel_IsPlayPauseButtonVisible;
                xamlMember.Setter = set_216_ControlPanel_IsPlayPauseButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsVolumeButtonVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsVolumeButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_217_ControlPanel_IsVolumeButtonVisible;
                xamlMember.Setter = set_217_ControlPanel_IsVolumeButtonVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsVolumeSliderVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsVolumeSliderVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_218_ControlPanel_IsVolumeSliderVisible;
                xamlMember.Setter = set_218_ControlPanel_IsVolumeSliderVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.IsTimelineVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsTimelineVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_219_ControlPanel_IsTimelineVisible;
                xamlMember.Setter = set_219_ControlPanel_IsTimelineVisible;
                break;
            case "Microsoft.PlayerFramework.ControlPanel.LeftItemsPanel":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "LeftItemsPanel", "Windows.UI.Xaml.Controls.Panel");
                xamlMember.Getter = get_220_ControlPanel_LeftItemsPanel;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.ControlPanel.RightItemsPanel":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ControlPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "RightItemsPanel", "Windows.UI.Xaml.Controls.Panel");
                xamlMember.Getter = get_221_ControlPanel_RightItemsPanel;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.BoolToVisibilityConverter.Inverse":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.BoolToVisibilityConverter");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Inverse", "Boolean");
                xamlMember.Getter = get_222_BoolToVisibilityConverter_Inverse;
                xamlMember.Setter = set_222_BoolToVisibilityConverter_Inverse;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.ViewModel":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ViewModel", "Microsoft.PlayerFramework.IInteractiveViewModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_223_MediaPlayerButton_ViewModel;
                xamlMember.Setter = set_223_MediaPlayerButton_ViewModel;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.Command":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Command", "Microsoft.PlayerFramework.ViewModelCommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_224_MediaPlayerButton_Command;
                xamlMember.Setter = set_224_MediaPlayerButton_Command;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.Size":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Size", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_225_MediaPlayerButton_Size;
                xamlMember.Setter = set_225_MediaPlayerButton_Size;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.StrokeThickness":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_226_MediaPlayerButton_StrokeThickness;
                xamlMember.Setter = set_226_MediaPlayerButton_StrokeThickness;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.ContentTransform":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ContentTransform", "Windows.UI.Xaml.Media.Transform");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_227_MediaPlayerButton_ContentTransform;
                xamlMember.Setter = set_227_MediaPlayerButton_ContentTransform;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.ContentHover":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ContentHover", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_228_MediaPlayerButton_ContentHover;
                xamlMember.Setter = set_228_MediaPlayerButton_ContentHover;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.ContentUnhover":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ContentUnhover", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_229_MediaPlayerButton_ContentUnhover;
                xamlMember.Setter = set_229_MediaPlayerButton_ContentUnhover;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.IsSelected":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_230_MediaPlayerButton_IsSelected;
                xamlMember.Setter = set_230_MediaPlayerButton_IsSelected;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.SelectedContent":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SelectedContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_231_MediaPlayerButton_SelectedContent;
                xamlMember.Setter = set_231_MediaPlayerButton_SelectedContent;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.SelectedContentTemplate":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SelectedContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_232_MediaPlayerButton_SelectedContentTemplate;
                xamlMember.Setter = set_232_MediaPlayerButton_SelectedContentTemplate;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.UnselectedContent":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "UnselectedContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_233_MediaPlayerButton_UnselectedContent;
                xamlMember.Setter = set_233_MediaPlayerButton_UnselectedContent;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.UnselectedContentTemplate":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "UnselectedContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_234_MediaPlayerButton_UnselectedContentTemplate;
                xamlMember.Setter = set_234_MediaPlayerButton_UnselectedContentTemplate;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.SelectedName":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SelectedName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_235_MediaPlayerButton_SelectedName;
                xamlMember.Setter = set_235_MediaPlayerButton_SelectedName;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerButton.UnselectedName":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "UnselectedName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_236_MediaPlayerButton_UnselectedName;
                xamlMember.Setter = set_236_MediaPlayerButton_UnselectedName;
                break;
            case "Microsoft.PlayerFramework.Timeline.ViewModel":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.Timeline");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ViewModel", "Microsoft.PlayerFramework.IInteractiveViewModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_237_Timeline_ViewModel;
                xamlMember.Setter = set_237_Timeline_ViewModel;
                break;
            case "Microsoft.PlayerFramework.Timeline.SliderStyle":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.Timeline");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_238_Timeline_SliderStyle;
                xamlMember.Setter = set_238_Timeline_SliderStyle;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderTrackDecreasePressedBackground":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderTrackDecreasePressedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_239_SeekableSlider_SliderTrackDecreasePressedBackground;
                xamlMember.Setter = set_239_SeekableSlider_SliderTrackDecreasePressedBackground;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderTrackDecreasePointerOverBackground":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderTrackDecreasePointerOverBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_240_SeekableSlider_SliderTrackDecreasePointerOverBackground;
                xamlMember.Setter = set_240_SeekableSlider_SliderTrackDecreasePointerOverBackground;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderThumbStyle":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderThumbStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_241_SeekableSlider_SliderThumbStyle;
                xamlMember.Setter = set_241_SeekableSlider_SliderThumbStyle;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.IsScrubbing":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsScrubbing", "Boolean");
                xamlMember.Getter = get_242_SeekableSlider_IsScrubbing;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.ActualValue":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ActualValue", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_243_SeekableSlider_ActualValue;
                xamlMember.Setter = set_243_SeekableSlider_ActualValue;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.MaxValue":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "MaxValue", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_244_SeekableSlider_MaxValue;
                xamlMember.Setter = set_244_SeekableSlider_MaxValue;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.HorizontalBackgroundContent":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "HorizontalBackgroundContent", "Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_245_SeekableSlider_HorizontalBackgroundContent;
                xamlMember.Setter = set_245_SeekableSlider_HorizontalBackgroundContent;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.HorizontalForegroundContent":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "HorizontalForegroundContent", "Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_246_SeekableSlider_HorizontalForegroundContent;
                xamlMember.Setter = set_246_SeekableSlider_HorizontalForegroundContent;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.VerticalBackgroundContent":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "VerticalBackgroundContent", "Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_247_SeekableSlider_VerticalBackgroundContent;
                xamlMember.Setter = set_247_SeekableSlider_VerticalBackgroundContent;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.VerticalForegroundContent":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "VerticalForegroundContent", "Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_248_SeekableSlider_VerticalForegroundContent;
                xamlMember.Setter = set_248_SeekableSlider_VerticalForegroundContent;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderTrackPressedBackground":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderTrackPressedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_249_SeekableSlider_SliderTrackPressedBackground;
                xamlMember.Setter = set_249_SeekableSlider_SliderTrackPressedBackground;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderThumbPressedBackground":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderThumbPressedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_250_SeekableSlider_SliderThumbPressedBackground;
                xamlMember.Setter = set_250_SeekableSlider_SliderThumbPressedBackground;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderThumbPressedBorder":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderThumbPressedBorder", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_251_SeekableSlider_SliderThumbPressedBorder;
                xamlMember.Setter = set_251_SeekableSlider_SliderThumbPressedBorder;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderDisabledBorder":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderDisabledBorder", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_252_SeekableSlider_SliderDisabledBorder;
                xamlMember.Setter = set_252_SeekableSlider_SliderDisabledBorder;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderTrackDecreaseDisabledBackground":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderTrackDecreaseDisabledBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_253_SeekableSlider_SliderTrackDecreaseDisabledBackground;
                xamlMember.Setter = set_253_SeekableSlider_SliderTrackDecreaseDisabledBackground;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderTrackDisabledBackground":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderTrackDisabledBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_254_SeekableSlider_SliderTrackDisabledBackground;
                xamlMember.Setter = set_254_SeekableSlider_SliderTrackDisabledBackground;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderThumbDisabledBackground":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderThumbDisabledBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_255_SeekableSlider_SliderThumbDisabledBackground;
                xamlMember.Setter = set_255_SeekableSlider_SliderThumbDisabledBackground;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderTrackPointerOverBackground":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderTrackPointerOverBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_256_SeekableSlider_SliderTrackPointerOverBackground;
                xamlMember.Setter = set_256_SeekableSlider_SliderTrackPointerOverBackground;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderThumbPointerOverBackground":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderThumbPointerOverBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_257_SeekableSlider_SliderThumbPointerOverBackground;
                xamlMember.Setter = set_257_SeekableSlider_SliderThumbPointerOverBackground;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderThumbPointerOverBorder":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderThumbPointerOverBorder", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_258_SeekableSlider_SliderThumbPointerOverBorder;
                xamlMember.Setter = set_258_SeekableSlider_SliderThumbPointerOverBorder;
                break;
            case "Microsoft.PlayerFramework.SeekableSlider.SliderThumbBackground":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.SeekableSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SliderThumbBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_259_SeekableSlider_SliderThumbBackground;
                xamlMember.Setter = set_259_SeekableSlider_SliderThumbBackground;
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.MediaPlayer":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "MediaPlayer", "Microsoft.PlayerFramework.MediaPlayer");
                xamlMember.Getter = get_260_InteractiveViewModel_MediaPlayer;
                xamlMember.Setter = set_260_InteractiveViewModel_MediaPlayer;
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.AvailableCaptions":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AvailableCaptions", "System.Collections.Generic.IEnumerable<Microsoft.PlayerFramework.Caption>");
                xamlMember.Getter = get_261_InteractiveViewModel_AvailableCaptions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.SelectedCaption":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SelectedCaption", "Microsoft.PlayerFramework.Caption");
                xamlMember.Getter = get_262_InteractiveViewModel_SelectedCaption;
                xamlMember.Setter = set_262_InteractiveViewModel_SelectedCaption;
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.AvailableAudioStreams":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "AvailableAudioStreams", "System.Collections.Generic.IEnumerable<Microsoft.PlayerFramework.AudioStream>");
                xamlMember.Getter = get_263_InteractiveViewModel_AvailableAudioStreams;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.SelectedAudioStream":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SelectedAudioStream", "Microsoft.PlayerFramework.AudioStream");
                xamlMember.Getter = get_264_InteractiveViewModel_SelectedAudioStream;
                xamlMember.Setter = set_264_InteractiveViewModel_SelectedAudioStream;
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.VisualMarkers":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "VisualMarkers", "System.Collections.Generic.IEnumerable<Microsoft.PlayerFramework.VisualMarker>");
                xamlMember.Getter = get_265_InteractiveViewModel_VisualMarkers;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsGoLiveEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsGoLiveEnabled", "Boolean");
                xamlMember.Getter = get_266_InteractiveViewModel_IsGoLiveEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsPlayResumeEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsPlayResumeEnabled", "Boolean");
                xamlMember.Getter = get_267_InteractiveViewModel_IsPlayResumeEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsPauseEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsPauseEnabled", "Boolean");
                xamlMember.Getter = get_268_InteractiveViewModel_IsPauseEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsStopEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsStopEnabled", "Boolean");
                xamlMember.Getter = get_269_InteractiveViewModel_IsStopEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsReplayEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsReplayEnabled", "Boolean");
                xamlMember.Getter = get_270_InteractiveViewModel_IsReplayEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsAudioSelectionEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsAudioSelectionEnabled", "Boolean");
                xamlMember.Getter = get_271_InteractiveViewModel_IsAudioSelectionEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsCaptionSelectionEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsCaptionSelectionEnabled", "Boolean");
                xamlMember.Getter = get_272_InteractiveViewModel_IsCaptionSelectionEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsRewindEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsRewindEnabled", "Boolean");
                xamlMember.Getter = get_273_InteractiveViewModel_IsRewindEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsFastForwardEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsFastForwardEnabled", "Boolean");
                xamlMember.Getter = get_274_InteractiveViewModel_IsFastForwardEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsSlowMotionEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSlowMotionEnabled", "Boolean");
                xamlMember.Getter = get_275_InteractiveViewModel_IsSlowMotionEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsSeekEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSeekEnabled", "Boolean");
                xamlMember.Getter = get_276_InteractiveViewModel_IsSeekEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsSkipPreviousEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipPreviousEnabled", "Boolean");
                xamlMember.Getter = get_277_InteractiveViewModel_IsSkipPreviousEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsSkipNextEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipNextEnabled", "Boolean");
                xamlMember.Getter = get_278_InteractiveViewModel_IsSkipNextEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsSkipBackEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipBackEnabled", "Boolean");
                xamlMember.Getter = get_279_InteractiveViewModel_IsSkipBackEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsSkipAheadEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSkipAheadEnabled", "Boolean");
                xamlMember.Getter = get_280_InteractiveViewModel_IsSkipAheadEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.IsScrubbingEnabled":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsScrubbingEnabled", "Boolean");
                xamlMember.Getter = get_281_InteractiveViewModel_IsScrubbingEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.BufferingProgress":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "BufferingProgress", "Double");
                xamlMember.Getter = get_282_InteractiveViewModel_BufferingProgress;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.DownloadProgress":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "DownloadProgress", "Double");
                xamlMember.Getter = get_283_InteractiveViewModel_DownloadProgress;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.StartTime":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "StartTime", "TimeSpan");
                xamlMember.Getter = get_284_InteractiveViewModel_StartTime;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.EndTime":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "EndTime", "TimeSpan");
                xamlMember.Getter = get_285_InteractiveViewModel_EndTime;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.Duration":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Duration", "TimeSpan");
                xamlMember.Getter = get_286_InteractiveViewModel_Duration;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.TimeRemaining":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "TimeRemaining", "TimeSpan");
                xamlMember.Getter = get_287_InteractiveViewModel_TimeRemaining;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.Position":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Position", "TimeSpan");
                xamlMember.Getter = get_288_InteractiveViewModel_Position;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.MaxPosition":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "MaxPosition", "TimeSpan");
                xamlMember.Getter = get_289_InteractiveViewModel_MaxPosition;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.CurrentState":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "CurrentState", "Windows.UI.Xaml.Media.MediaElementState");
                xamlMember.Getter = get_290_InteractiveViewModel_CurrentState;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.TimeFormatConverter":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "TimeFormatConverter", "Windows.UI.Xaml.Data.IValueConverter");
                xamlMember.Getter = get_291_InteractiveViewModel_TimeFormatConverter;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.SkipBackInterval":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SkipBackInterval", "System.Nullable<TimeSpan>");
                xamlMember.Getter = get_292_InteractiveViewModel_SkipBackInterval;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.SkipAheadInterval":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SkipAheadInterval", "System.Nullable<TimeSpan>");
                xamlMember.Getter = get_293_InteractiveViewModel_SkipAheadInterval;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.SignalStrength":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SignalStrength", "Double");
                xamlMember.Getter = get_294_InteractiveViewModel_SignalStrength;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModel.MediaQuality":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "MediaQuality", "Microsoft.PlayerFramework.MediaQuality");
                xamlMember.Getter = get_295_InteractiveViewModel_MediaQuality;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModelBase.SkipPreviousThreshold":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModelBase");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SkipPreviousThreshold", "TimeSpan");
                xamlMember.Getter = get_296_InteractiveViewModelBase_SkipPreviousThreshold;
                xamlMember.Setter = set_296_InteractiveViewModelBase_SkipPreviousThreshold;
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModelBase.IsMuted":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModelBase");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsMuted", "Boolean");
                xamlMember.Getter = get_297_InteractiveViewModelBase_IsMuted;
                xamlMember.Setter = set_297_InteractiveViewModelBase_IsMuted;
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModelBase.IsFullScreen":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModelBase");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsFullScreen", "Boolean");
                xamlMember.Getter = get_298_InteractiveViewModelBase_IsFullScreen;
                xamlMember.Setter = set_298_InteractiveViewModelBase_IsFullScreen;
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModelBase.IsSlowMotion":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModelBase");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsSlowMotion", "Boolean");
                xamlMember.Getter = get_299_InteractiveViewModelBase_IsSlowMotion;
                xamlMember.Setter = set_299_InteractiveViewModelBase_IsSlowMotion;
                break;
            case "Microsoft.PlayerFramework.InteractiveViewModelBase.Volume":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.InteractiveViewModelBase");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Volume", "Double");
                xamlMember.Getter = get_300_InteractiveViewModelBase_Volume;
                xamlMember.Setter = set_300_InteractiveViewModelBase_Volume;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerControl.ViewModel":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ViewModel", "Microsoft.PlayerFramework.IInteractiveViewModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_301_MediaPlayerControl_ViewModel;
                xamlMember.Setter = set_301_MediaPlayerControl_ViewModel;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerToggleButton.Size":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerToggleButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Size", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_302_MediaPlayerToggleButton_Size;
                xamlMember.Setter = set_302_MediaPlayerToggleButton_Size;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerToggleButton.Command":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerToggleButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Command", "Microsoft.PlayerFramework.ViewModelCommand");
                xamlMember.Getter = get_303_MediaPlayerToggleButton_Command;
                xamlMember.Setter = set_303_MediaPlayerToggleButton_Command;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerToggleButton.ViewModel":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerToggleButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ViewModel", "Microsoft.PlayerFramework.IInteractiveViewModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_304_MediaPlayerToggleButton_ViewModel;
                xamlMember.Setter = set_304_MediaPlayerToggleButton_ViewModel;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerToggleButton.StrokeThickness":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerToggleButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_305_MediaPlayerToggleButton_StrokeThickness;
                xamlMember.Setter = set_305_MediaPlayerToggleButton_StrokeThickness;
                break;
            case "Microsoft.PlayerFramework.MediaPlayerToggleButton.ContentTransform":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.MediaPlayerToggleButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ContentTransform", "Windows.UI.Xaml.Media.Transform");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_306_MediaPlayerToggleButton_ContentTransform;
                xamlMember.Setter = set_306_MediaPlayerToggleButton_ContentTransform;
                break;
            case "Microsoft.PlayerFramework.VolumeSlider.Orientation":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VolumeSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_307_VolumeSlider_Orientation;
                xamlMember.Setter = set_307_VolumeSlider_Orientation;
                break;
            case "Microsoft.PlayerFramework.VolumeSlider.ViewModel":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VolumeSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ViewModel", "Microsoft.PlayerFramework.IInteractiveViewModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_308_VolumeSlider_ViewModel;
                xamlMember.Setter = set_308_VolumeSlider_ViewModel;
                break;
            case "Microsoft.PlayerFramework.VolumeSlider.InnerFocusState":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VolumeSlider");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "InnerFocusState", "Windows.UI.Xaml.FocusState");
                xamlMember.Getter = get_309_VolumeSlider_InnerFocusState;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.PlayerFramework.VolumeButton.PanelBackground":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VolumeButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "PanelBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_310_VolumeButton_PanelBackground;
                xamlMember.Setter = set_310_VolumeButton_PanelBackground;
                break;
            case "Microsoft.PlayerFramework.VolumeButton.ViewModel":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VolumeButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ViewModel", "Microsoft.PlayerFramework.IInteractiveViewModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_311_VolumeButton_ViewModel;
                xamlMember.Setter = set_311_VolumeButton_ViewModel;
                break;
            case "Microsoft.PlayerFramework.VolumeButton.PanelPosition":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VolumeButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "PanelPosition", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_312_VolumeButton_PanelPosition;
                xamlMember.Setter = set_312_VolumeButton_PanelPosition;
                break;
            case "Microsoft.PlayerFramework.VolumeButton.IsVolumeVisible":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VolumeButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "IsVolumeVisible", "Boolean");
                xamlMember.Getter = get_313_VolumeButton_IsVolumeVisible;
                xamlMember.Setter = set_313_VolumeButton_IsVolumeVisible;
                break;
            case "Microsoft.PlayerFramework.VolumeButton.MuteButtonStyle":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.VolumeButton");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "MuteButtonStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_314_VolumeButton_MuteButtonStyle;
                xamlMember.Setter = set_314_VolumeButton_MuteButtonStyle;
                break;
            case "Microsoft.PlayerFramework.ResolutionIndicator.MediaQuality":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ResolutionIndicator");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "MediaQuality", "Microsoft.PlayerFramework.MediaQuality");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_315_ResolutionIndicator_MediaQuality;
                xamlMember.Setter = set_315_ResolutionIndicator_MediaQuality;
                break;
            case "Microsoft.PlayerFramework.DeselectableListBox.ItemsSource":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.DeselectableListBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_316_DeselectableListBox_ItemsSource;
                xamlMember.Setter = set_316_DeselectableListBox_ItemsSource;
                break;
            case "Microsoft.PlayerFramework.DeselectableListBox.SelectedItem":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.DeselectableListBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_317_DeselectableListBox_SelectedItem;
                xamlMember.Setter = set_317_DeselectableListBox_SelectedItem;
                break;
            case "Microsoft.PlayerFramework.DeselectableListBox.ItemTemplate":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.DeselectableListBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_318_DeselectableListBox_ItemTemplate;
                xamlMember.Setter = set_318_DeselectableListBox_ItemTemplate;
                break;
            case "Microsoft.PlayerFramework.DeselectableListBox.SelectedIdentifierText":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.DeselectableListBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "SelectedIdentifierText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_319_DeselectableListBox_SelectedIdentifierText;
                xamlMember.Setter = set_319_DeselectableListBox_SelectedIdentifierText;
                break;
            case "Microsoft.PlayerFramework.DeselectableListBox.DeselectedItem":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.DeselectableListBox");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "DeselectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_320_DeselectableListBox_DeselectedItem;
                xamlMember.Setter = set_320_DeselectableListBox_DeselectedItem;
                break;
            case "Microsoft.PlayerFramework.ErrorView.ErrorText":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ErrorView");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ErrorText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_321_ErrorView_ErrorText;
                xamlMember.Setter = set_321_ErrorView_ErrorText;
                break;
            case "Microsoft.PlayerFramework.BufferingView.ViewModel":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.BufferingView");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ViewModel", "Microsoft.PlayerFramework.IInteractiveViewModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_322_BufferingView_ViewModel;
                xamlMember.Setter = set_322_BufferingView_ViewModel;
                break;
            case "Microsoft.PlayerFramework.PositionedItemsControl.ItemsSource":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.PositionedItemsControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_323_PositionedItemsControl_ItemsSource;
                xamlMember.Setter = set_323_PositionedItemsControl_ItemsSource;
                break;
            case "Microsoft.PlayerFramework.PositionedItemsPanel.Maximum":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.PositionedItemsPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_324_PositionedItemsPanel_Maximum;
                xamlMember.Setter = set_324_PositionedItemsPanel_Maximum;
                break;
            case "Microsoft.PlayerFramework.PositionedItemsPanel.Minimum":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.PositionedItemsPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_325_PositionedItemsPanel_Minimum;
                xamlMember.Setter = set_325_PositionedItemsPanel_Minimum;
                break;
            case "Microsoft.PlayerFramework.PositionedItemsControl.ItemTemplate":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.PositionedItemsControl");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_326_PositionedItemsControl_ItemTemplate;
                xamlMember.Setter = set_326_PositionedItemsControl_ItemTemplate;
                break;
            case "Microsoft.PlayerFramework.PositionedItemsPanel.MaxPosition":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.PositionedItemsPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "MaxPosition", "System.Nullable<Double>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_327_PositionedItemsPanel_MaxPosition;
                xamlMember.Setter = set_327_PositionedItemsPanel_MaxPosition;
                break;
            case "Microsoft.PlayerFramework.PositionedItemsPanel.MinPosition":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.PositionedItemsPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "MinPosition", "System.Nullable<Double>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_328_PositionedItemsPanel_MinPosition;
                xamlMember.Setter = set_328_PositionedItemsPanel_MinPosition;
                break;
            case "Microsoft.PlayerFramework.PositionedItemsPanel.DisplayAllItems":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.PositionedItemsPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "DisplayAllItems", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_329_PositionedItemsPanel_DisplayAllItems;
                xamlMember.Setter = set_329_PositionedItemsPanel_DisplayAllItems;
                break;
            case "Microsoft.PlayerFramework.PositionedItemsPanel.Position":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.PositionedItemsPanel");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Position", "Double");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_330_PositionedItemsPanel_Position;
                xamlMember.Setter = set_330_PositionedItemsPanel_Position;
                break;
            case "Microsoft.PlayerFramework.ParentAwareListBoxItem.ParentListBox":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.PlayerFramework.ParentAwareListBoxItem");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "ParentListBox", "Microsoft.PlayerFramework.ParentAwareListBox");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_331_ParentAwareListBoxItem_ParentListBox;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Format":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Format", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_332_ChartAnnotationLabelDefinition_Format;
                xamlMember.Setter = set_332_ChartAnnotationLabelDefinition_Format;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Template":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Template", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_333_ChartAnnotationLabelDefinition_Template;
                xamlMember.Setter = set_333_ChartAnnotationLabelDefinition_Template;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.DefaultVisualStyle":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "DefaultVisualStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_334_ChartAnnotationLabelDefinition_DefaultVisualStyle;
                xamlMember.Setter = set_334_ChartAnnotationLabelDefinition_DefaultVisualStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Location":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Location", "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_335_ChartAnnotationLabelDefinition_Location;
                xamlMember.Setter = set_335_ChartAnnotationLabelDefinition_Location;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.HorizontalAlignment":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "HorizontalAlignment", "Windows.UI.Xaml.HorizontalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_336_ChartAnnotationLabelDefinition_HorizontalAlignment;
                xamlMember.Setter = set_336_ChartAnnotationLabelDefinition_HorizontalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.VerticalAlignment":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "VerticalAlignment", "Windows.UI.Xaml.VerticalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_337_ChartAnnotationLabelDefinition_VerticalAlignment;
                xamlMember.Setter = set_337_ChartAnnotationLabelDefinition_VerticalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.HorizontalOffset":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "HorizontalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_338_ChartAnnotationLabelDefinition_HorizontalOffset;
                xamlMember.Setter = set_338_ChartAnnotationLabelDefinition_HorizontalOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.VerticalOffset":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "VerticalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_339_ChartAnnotationLabelDefinition_VerticalOffset;
                xamlMember.Setter = set_339_ChartAnnotationLabelDefinition_VerticalOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontFamily":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "FontFamily", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_340_HighlightStyle_FontFamily;
                xamlMember.Setter = set_340_HighlightStyle_FontFamily;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontWeight":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "FontWeight", "Telerik.UI.Xaml.Controls.Input.FontWeightName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_341_HighlightStyle_FontWeight;
                xamlMember.Setter = set_341_HighlightStyle_FontWeight;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontStyle":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_342_HighlightStyle_FontStyle;
                xamlMember.Setter = set_342_HighlightStyle_FontStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.Foreground":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_343_HighlightStyle_Foreground;
                xamlMember.Setter = set_343_HighlightStyle_Foreground;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontSize":
                userType = (global::IPlayer.IPlayer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::IPlayer.IPlayer_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_344_HighlightStyle_FontSize;
                xamlMember.Setter = set_344_HighlightStyle_FontSize;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::IPlayer.IPlayer_XamlTypeInfo.XamlSystemBaseType
    {
        global::IPlayer.IPlayer_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::IPlayer.IPlayer_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::IPlayer.IPlayer_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::IPlayer.IPlayer_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


